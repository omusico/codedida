<?php
// $Id$

/**
 * 权限注册：hook_perm();
 * 用户注册表单：hook_user_register_form(&$form)
 * 用户注册验证：hook_user_register_validate($form, $v)
 * 用户写入成功：hook_user_insert(&$ac)
 * 用户登录表单：hook_user_login_form(&$form)
 * 用户登录验证：hook_user_login_validate($form, $v)
 * 载入用户信息：hook_user_load(&$ac)
 * 用户信息编辑表单：hook_user_edit_form($ac, $op, &$form)
 * 用户信息编辑验证：hook_user_edit_validate($form, $v, $ac)
 * 用户信息更新保存：hook_user_save($ac)
 * 用户删除：hook_user_delete($ac)
 * 用户状态改变：hook_user_status($oldStatus, $ac)
 *   status：0、未激活，1、正常，2、冻结，3、注销
 * 用户注销：hook_user_logout($ac)
 */

/**
 * @Implement of hook_menu()
 */
function user_menu(){
  $items = array();
  $items['user'] = array(
    'access_callback' => true,
    'page_callback' => 'user_default',
    'file' => 'user.page.inc',
  );
  $items['user/login'] = array(
    'title' => '登录',
    'access_callback' => 'user_is_not_login',
    'page_callback' => 'user_page_login',
    'file' => 'user.page.inc',
  );
  $items['user/login/ajax'] = array(
    'access_callback' => 'user_is_not_login',
    'page_callback' => 'user_page_login_ajax',
    'file' => 'user.page.inc',
  );
  $items['user/register'] = array(
    'title' => '注册',
    'access_callback' => 'user_is_register',
    'page_callback' => 'user_page_register',
    'file' => 'user.page.inc',
  );
  $items['user/activation'] = array(
    'title' => '激活',
    'access_callback' => 'user_is_activation',
    'access_arguments' => array('goto'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('user_page_activation'),
    'file' => 'user.page.inc',
  );
  $items['user/pass'] = array(
    'title' => '找回密码',
    'access_callback' => 'user_is_not_login',
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('user_page_pass'),
    'file' => 'user.page.inc',
  );
  $items['user/newpass'] = array(
    'title' => '修改密码',
    'access_callback' => 'user_is_login',
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('user_page_newpass'),
    'file' => 'user.page.inc',
  );
  $items['user/edit'] = array(
    'title' => '编辑资料',
    'access_callback' => 'user_is_login',
    'page_callback' => 'user_page_edit',
    'file' => 'user.page.inc',
  );
  $items['user/logout'] = array(
    'access_callback' => 'user_is_login',
    'page_callback' => 'user_logout',
  );
  
  $items['user/%'] = array(
    'load_functions' => array(1 => array('user_load')),
    'access_callback' => true,
    'page_callback' => 'user_page_view',
    'page_arguments' => array(1),
    'file' => 'user.page.inc',
  );
  
  $items['admin/users'] = array(
    'title' => '用户列表',
    'access_arguments' => array('admin user view'),
    'page_callback' => 'user_admin_default',
    'file' => 'user.admin.inc',
  );
  $items['admin/users/view/%'] = array(
    'title' => '用户资料',
    'load_functions' => array(3 => array('user_load')),
    'access_arguments' => array('admin user view'),
    'page_callback' => 'user_admin_view',
    'page_arguments' => array(3),
    'file' => 'user.admin.inc',
  );
  $items['admin/users/add'] = array(
    'title' => '新增用户',
    'access_arguments' => array('admin user add'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('user_admin_add'),
    'file' => 'user.admin.inc',
  );
  $items['admin/users/perms'] = array(
    'title' => '用户权限',
    'access_arguments' => array('admin user perms'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('user_set_perm'),
    'file' => 'user.admin.inc',
  );
  $items['admin/users/roles'] = array(
    'title' => '角色管理',
    'access_arguments' => array('admin user roles'),
    'page_callback' => 'user_admin_roles',
    'file' => 'user.admin.inc',
  );
  $items['admin/users/fields'] = array(
    'title' => '用户字段',
    'access_arguments' => array('admin user fields'),
    'page_callback' => 'user_admin_fields',
    'file' => 'user.admin.inc',
  );
  $items['admin/users/settings'] = array(
    'title' => '用户设置',
    'access_arguments' => array('admin user settings'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('user_set_settings'),
    'file' => 'user.admin.inc',
  );
  return $items;
}

/**
 * 允许注册
 */
function user_is_register(){
  return ($GLOBALS['conf']['user']['register'] && !$GLOBALS['user']->uid);
}

/**
 * 已登录
 */
function user_is_login(){
  return $GLOBALS['user']->uid;
}

/**
 * 激活
 */
function user_is_activation($goto = NULL){
 if(!$GLOBALS['user']->uid && !$GLOBALS['conf']['user']['status']){
   return true;
 }else if($goto){
   dd_set_message(t('user', '当前帐号已激活，若要激活其它帐号，请先退出'));
   dd_goto(NULL);
 }
}

/**
 * 未登录
 */
function user_is_not_login(){
  return !$GLOBALS['user']->uid;
}

/**
 * 权限验证
 */
function user_access($string, $account = NULL, $reset = false) {
  if(!$account) $account = $GLOBALS['user'];
  
  if($account->uid == 1) return true;
  
  static $perm = array(), $perms;
  
  if($reset){
    var_del('roles_perm_cache');
    $perm[$account->uid] = array();
  }
  
  if(!isset($perms)){
    $perms = user_get_perms();
  }
  
  if (!isset($perm[$account->uid])){
    $perm[$account->uid] = array();
    
    if($account->roles){
      foreach($account->roles as $rid => $m){
        if($perms[$rid]){
          $perm[$account->uid] += $perms[$rid];
        }
      }
    }
    //$account->roles[var_get_key('user', 'anonymous_role', 1)] = var_get_key('user', 'anonymous', '游客');
  }
  return isset($perm[$account->uid][$string]);
}

/**
 * 角色权限缓存
 */
function user_get_perms($rid = NULL){
  static $perms;
  if(!isset($perms)){
    if(!$perms = var_get('roles_perm_cache')){
      if($fetch = db_query('SELECT rid, perm FROM {role}')){
        $perms = array();
        foreach($fetch as $row) {
          if($row->perm){
            $perms[$row->rid] = array_flip(dd_array2_to('key', unserialize($row->perm)));
          }
        }
        var_set('roles_perm_cache', $perms);
      }
    }
  }
  
  if(!$rid){
    return $perms;
  }else if(is_string($rid)){
    return $perms[$rid];
  }else if(is_array($rid)){
    $k = array();
    foreach($rid as $i){
      if($perms[$i])
        $k += $perms[$i];
    }
    return $k;
  }
}

/**
 * hook_perm
 */
function user_perm(){
  return array(
    'user view user info' => t('user', '浏览会员'),
    'user use search user' => t('user', '搜索会员'),
    'admin user view' => t('user', '管理用户'),
    'admin user add' => t('user', '新增用户'),
    'admin user perms' => t('user', '用户权限'),
    'admin user roles' => t('user', '用户角色'),
    'admin user fields' => t('user', '用户字段'),
    'admin user settings' => t('user', '用户设置'),
    'admin user change mail' => t('user', '修改用户邮箱'),
    'admin user change name' => t('user', '修改用户昵称'),
    'user change mail' => t('user', '修改自己的邮箱'),
    'user change name' => t('user', '修改自己的昵称'),
  );
}

/**
 * 管理菜单
 */
function user_system_admin_menus(){
  $item = array(
    array(t('user', '用户设置'), 'admin/users/settings'),
    array(t('user', '用户列表'), 'admin/users'),
    array(t('user', '用户权限'), 'admin/users/perms'),
    array(t('user', '角色管理'), 'admin/users/roles'),
    array(t('user', '用户字段'), 'admin/users/fields'),
    array(t('user', '新增用户'), 'admin/users/add'),
  );
  
  return array($item, t('user', '用户管理'));
}

function _user_perm(){
  static $perms = NULL;
  if(!isset($perms)){
    if($data = cache_get('user_perm')){
      $perms = $data->data;
    }else{
      $perms = _module_invoke_all('perm');
      cache_set('user_perm', $perms);
    }
  }
  return $perms;
}

function _user_role_perms($perms){
  if($perms){
    $data = _user_perm();
    foreach($perms as $module => $perm){
      $item = array();
      foreach($perm as $key => $v){
        $item[] = $data[$module][$key];
      }
      $items[] = theme('item_list', array(implode('，', $item)), $module);
    }
    return theme('item_list', $items);
  }
}

function _user_perm_array($array){
  foreach($array as $value){
    foreach($value as $key => $val){
      $t[$key] = $val;
    }
  }
  return $t;
}

/**
 * users表的data字段，用做存储自定义数据
 * 数值以键值形式序列化保存，相同键值将覆盖
 * @param (int)$uid
 *  用户 id
 * @param (array)$value
 *  需保存的数据
 */
function user_set_data($uid, $value = array()){
  global $user;
  if($o = db_query('SELECT uid, data FROM {users} WHERE uid = ?', array($uid), array('return' => 'one'))){
    $data = array();
    if($o->data) $data = unserialize($o->data);
    $data = array_merge($data, $value);
    db_exec('UPDATE {users} SET data = ? WHERE uid = ?', array(serialize($data), $o->uid));
    global $user;
    if($o->uid == $user->uid){
      $user->data = $data;
    }
  }
}

/**
 * 获取自定义数据
 * @param (int)$uid
 *  用户id
 * @param (*)$key
 *  合法的键名，留空则获取全部
 */
function user_get_data($uid, $key = NULL){
  global $user;
  if($uid == $user->uid){
    return $key ? $user->data[$key] : $user->data;
  }else if($data = db_query('SELECT data FROM {users} WHERE uid = ?', array($uid), array('return' => 'column'))){
    $data = unserialize($data);
    return $key ? $user->data[$key] : $user->data;
  }
}

/**
 * 用户编辑表单
 */
function user_edit_form($ac, $op = 'user'){
  global $conf, $user;
  if(!$ac->data) $ac->data = array();
  if(user_access('admin user change name') || ($user->uid == $ac->uid && user_access('admin user change name'))){
    $form['fields']['name'] = array(
      '#type' => 'textfield',
      '#default_value' => $ac->name,
      '#title' => t('user', '昵称'),
    );
  }else{
    $form['fields']['name'] = array('#value' => $ac->name, '#title' => t('user', '昵称'));
  }
  
  if(user_access('admin user change mail') || ($user->uid == $ac->uid && user_access('admin user change mail'))){
    $form['fields']['mail'] = array(
      '#type' => 'textfield',
      '#default_value' => $ac->mail,
      '#title' => t('user', '帐号'),
    );
  }else{
    $form['fields']['mail'] = array('#value' => $ac->mail, '#title' => t('user', '帐号'));
  }
  if(($conf['user']['select_lang'] || $op == 'admin') && count($conf['languages']) > 1){
	  $form['fields']['language'] = array(
	    '#type' => 'select',
	    '#title' => t('user', '语言'),
	    '#default_value' => $ac->language,
	    '#options' => array('' => t('user', '默认')) + $conf['languages'],
	  );
	}
	if(($conf['user']['select_theme'] || $op == 'admin') && count($conf['themes']) > 1){
		
	  foreach($conf['themes'] as $theme){
	  	$themes[$theme['filename']] = $theme['name'];
	  }
	  
	  $form['fields']['theme'] = array(
	    '#type' => 'select',
	    '#title' => t('user', '主题'),
	    '#default_value' => $ac->theme,
	    '#options' => array('' => t('user', '默认')) + $themes,
	  );
  }
  
  if($op == 'admin'){
	  $opt = user_roles_opt();
	  unset($opt[var_get_key('user', 'anonymous_role', 1)]);
	  $form['fields']['rid'] = array(
	    '#type' => 'checkbox',
	    '#title' => t('user', '角色'),
	    '#default_value' => $ac->roles ? array_flip($ac->roles) : NULL,
	    '#options' => $opt,
	  );
  }
  
  $form['fields']['created'] = array('#value' => format_date($ac->created), '#title' => t('user', '注册时间'));
  $form['fields']['host'] = array('#value' => $ac->host, '#title' => t('user', '上次登录主机'));
  $form['fields']['login'] = array('#value' => format_date($ac->login), '#title' => t('user', '上次登录时间'));
  $form['fields']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('user', '确认提交'),
    '#weight' => 100,
    '#submit' => 'user_edit_submit'
  );
  
  module_alter_all('user_edit_form', $ac, $op, $form);
  
  field_get_node_form('user', 'field', $ac, $form);
  
  $form['settings'] = array(
    '#validate' => array('user_edit_validate'),
    '#data' => $ac,
    '#ajax_validate' => true
  );
  $form['fields']['op'] = array(
    '#default_value' => $op,
    '#type' => 'hidden',
    '#constant' => 1
  );
  $form['fields']['uid'] = array(
    '#default_value' => $ac->uid,
    '#type' => 'hidden',
    '#constant' => 1
  );
  $form['fields']['nid'] = array(
    '#default_value' => $ac->uid,
    '#type' => 'hidden',
    '#constant' => 1
  );
  return $form;
}

/**
 * 用户资料编辑验证
 */
function user_edit_validate($form, $value){
  global $user;
  if($ac = $form['settings']['#data']){
    $v = (object) $value;
    if($ac->uid == $v->uid){
      if(user_access('admin user change mail') || ($user->uid == $ac->uid && user_access('admin user change mail'))){
        if($ac->mail != $v->mail){
          $error = user_default_validate_mail($v->mail);
        }
      }
      
      if(!$error && (user_access('admin user change name') || ($user->uid == $ac->uid && user_access('admin user change name')))){
        if($ac->name != $v->name){
          $error = user_default_validate_name($v->name);
        }
      }
      
      // 验证密码
      if(!$error && $v->op == 'user' && !db_query('SELECT uid FROM {users} WHERE uid = ? AND pass = ?', array($ac->uid, md5($v->pass), array('return' => 'column')))){
        $error['pass']['#error'][] = t('user', '密码不匹配');
      }
      
      if(!$error){
        if(!$error = field_get_node_validate('user', 'field', $v, $ac, $form)){
          /**
           * 触发 hook_user_edit_validate()
           */
          $error = module_invoke_all('user_edit_validate', $v, $ac, $form);
        }
      }
    }
  }
  return $error;
}

function user_edit_submit($form, $value){
  $ac = $form['settings']['#data'];
  $v = (object) $value;
  if($ac->uid == $v->uid){
    global $user;
    if(isset($v->theme)) $ac->theme = $v->theme;
    if(isset($v->language)) $ac->language = $v->language;
    if(user_access('admin user change mail') || ($user->uid == $ac->uid && user_access('admin user change mail'))){
      $ac->mail = $v->mail;
    }
    if(user_access('admin user change name') || ($user->uid == $ac->uid && user_access('admin user change name'))){
      $ac->name = $v->name;
    }
    
    if(db_exec('UPDATE {users} SET name = ?, mail = ?, theme = ?, language = ? WHERE uid = ?', array($ac->name, $ac->mail, $ac->theme, $ac->language, $ac->uid), array('return' => 1))){
      /**
       * 触发 hook_user_save()
       */
      $ac->nid = $ac->uid;
      if($user->uid == $ac->uid){
        user_clear_session($ac->uid);
      }
      
      if($v->rid){
      	user_set_roles($ac->uid, $v->rid);
      }
      
      module_invoke_all('user_save', $v, $ac);
      
      field_get_node_save('user', 'field', $v, $ac);
      
      dd_set_message(t('user', '编辑成功'));
    }
  }else{
    dd_set_message(t('user', '错误的请求'));
  }
}

/**
 * 保存用户
 * @param (object) $v
 *  用户数据
 * @param (object) $ac
 *  如果是编辑用户，用户旧数据，可能为空
 */
function user_save($v, $ac = NULL, &$error = NULL){
  if(!$ac->uid && $v->uid){
    $ac = user_load($v->uid);
  }
  if(!$error = user_validate($v, $ac)){
    if($ac->uid){
      // 编辑
      if(isset($v->theme)) $ac->theme = $v->theme;
      if(isset($v->language)) $ac->language = $v->language;
      if(isset($v->mail)) $ac->mail = $v->mail;
      
      if(db_exec('UPDATE {users} SET name = ?, mail = ?, theme = ?, language = ? WHERE uid = ?', array($ac->name, $ac->mail, $ac->theme, $ac->language, $ac->uid), array('return' => 1))){
        $v->nid = $ac->uid;
        if($user->uid == $ac->uid){
          user_clear_session($ac->uid);
        }
        
        if($v->rid){
        	user_set_roles($ac->uid, $v->rid);
        }
        
        field_get_node_save('user', 'field', $v, $ac);
        module_invoke_all('user_save', $v, $ac);
      }
      return $v;
    }else{
      // 写入
      return user_insert($v);
    }
  }
}

/**
 * 验证用户
 * @param (object) $v
 *  用户数据
 * @param (object) $ac
 *  如果是编辑用户，用户旧数据，可能为空
 */
function user_validate($v, $ac = NULL){
  global $user;
  $error = NULL;
  
  if(!$ac->uid && $v->uid){
    $ac = user_load($v->uid);
  }
  if(!$v->mail){
    $error['mail']['#error'][] = t('user', '邮箱不能为空');
  }else if(!$ac->mail || $ac->mail != $v->mail){
    $error = user_default_validate_mail($v->mail);
  }
  
  if(!$error){
    if(!$v->name){
      $error['name']['#error'][] = t('user', '用户名不能为空');
    }else if(!$ac->name || $ac->name != $v->name){
      $error = user_default_validate_name($v->name);
    }
  }
  
  if(!$error){
    if(!$error = field_get_node_validate('user', 'field', $v, $ac)){
      /**
       * 触发 hook_user_edit_validate()
       */
      $error = module_invoke_all('user_edit_validate', $v, $ac);
    }
  }
  return $error;
}

/**
 * 注册表单
 */
function user_register_form($op = 'user'){
	global $conf;
  $form['settings'] = array(
    '#validate' => array('user_register_validate'),
    '#ajax_validate' => true,
    '#ajax_submit' => array(
      'des' => true,
      'options' => array(
        'dataType' => 'script',
        'url' => url('user/register', array('query' => array('ajax' => 'submit', 'redirect' => urlencode($_GET['redirect'])))),
      ),
    ),
  );
  $form['fields']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('user', '邮箱'),
    '#required' => true,
    '#description' => t('user', '该邮箱将用做接收密码等重要信息'),
    '#attributes' => array(
      'class' => "{email:true}"
    ),
  );
  $form['fields']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('user', '昵称'),
    '#required' => true,
    '#description' => t('user', '昵称长度 2-20，中英文皆可'),
  );
  $form['fields']['pass'] = array(
    '#type' => 'password',
    '#title' => t('user', '密码'),
    '#required' => true,
    '#description' => t('user', '密码区分大小写'),
    '#attributes' => array(
      'id' => 'password',
    ),
  );
  $form['fields']['pass2'] = array(
    '#type' => 'password',
    '#title' => t('user', '确认'),
    '#required' => true,
    '#description' => t('user', '重复一次密码'),
    '#attributes' => array(
      'class' => "{equalTo:'#password'}"
    ),
  );
  if(($conf['user']['select_lang'] || $op == 'admin') && count($conf['languages']) > 1){
	  $form['fields']['language'] = array(
	    '#type' => 'select',
	    '#title' => t('user', '语言'),
	    '#default_value' => $conf['default_language']['language'],
	    '#options' => array('' => t('user', '默认')) + $conf['languages'],
	  );
	}
	if(($conf['user']['select_theme'] || $op == 'admin') && count($conf['themes']) > 1){
		
	  foreach($conf['themes'] as $theme){
	  	$themes[$theme['filename']] = $theme['name'];
	  }
	  
	  $form['fields']['theme'] = array(
	    '#type' => 'select',
	    '#title' => t('user', '主题'),
	    '#default_value' => $conf['default_theme'],
	    '#options' => array('' => t('user', '默认')) + $themes,
	  );
  }
  if($conf['captcha']['user_register']['data']){
    $form['fields']['captcha'] = array(
      '#type' => 'captcha',
      '#required' => true,
      '#title' => t('user', '验证'),
      '#captcha' => array(
        'image' => $conf['captcha']['user_register']['image'] ? '50x16' : 0,
        'type' => $conf['captcha']['user_register']['type']
      )
    );
  }
  
  $ac = new stdClass();
  $ac = $GLOBALS['user'];
  
  module_alter_all('user_register_form', $form, $op, $ac);
  field_get_node_form('user', 'field', $ac, $form);
  
  $form['fields']['submit'] = array(
    '#type' => 'submit',
    '#weight' => 100,
    '#submit' => 'user_register_submit',
    '#value' => t('user', '确认注册'),
    '#field_suffix' => l(t('user', '已经注册?'), 'user/login')
  );
  return $form;
}

/**
 * 验证用户名
 */
function user_default_validate_name($name){
  if((mb_strlen($name, 'utf-8') < 2) || (mb_strlen($name, 'utf-8') > 20)){
     $t['name']['#error'][] = t('user', '昵称长度 2 - 20 字符');
  }else if(strstr($name, '　') || !preg_match("/^[\w\x80-\xff-]+$/", $name)){
     $t['name']['#error'][] = t('user', '昵称含有非法字符');
  }else if(db_query('SELECT name FROM {users} WHERE name = ?', array($name), array('return' => 'column'))){
    $t['name']['#error'][] = t('user', '%name 已经存在', array('%name' => $name));
  }
  return $t;
}

/**
 * 验证邮件
 */
function user_default_validate_mail($mail){
  if($msg = form_vali_mail($mail)){
    $t['mail']['#error'][] = $msg;
  }else if(db_query('SELECT mail FROM {users} WHERE mail = ?', array($mail), array('return' => 'column'))){
     $t['mail']['#error'][] = t('user', '%name 已经存在', array('%name' => $mail));
  }
  return $t;
}

/**
 * 注册验证
 */
function user_register_validate($form, $value){
  $v = (object) $value;
  if(!$t = user_default_validate_name($v->name)){
    if(!$t = user_default_validate_mail($v->mail)){
      if(!isset($v->pass) || ($v->pass != $v->pass)){
        $t['pass2']['#error'][] = t('user', '两次输入的密码不一致');
      }else if(!$t = field_get_node_validate('user', 'field', $v, NULL, $form)){
        $t = module_invoke_all('user_validate', $v);
      }
    }
  }
  return $t;
}

/**
 * 注册表单提交处理
 */
function user_register_submit($form, $value){
  $v = (object) $value;
  if($account = user_insert($v)){
    dd_set_message(t('user', '恭喜，注册成功了'));
    if($user = user_login(user_load($account->uid))){
      dd_goto(dd_get_token(var_get_key('user', 'redirect', 'user/' . $user->uid), $user, array('user', 'system')));
    }
  }else{
    dd_set_message(t('user', '抱歉，出现问题，注册失败了'));
  }
}

/**
 * 写入角色
 */
function user_set_roles($uid, $rid){
	db_exec('DELETE FROM {user_roles} WHERE uid = ?', array($uid));
	if(is_array($rid)){
		foreach($rid as $id){
			//if($id && $id != var_get_key('user', 'anonymous_role', 1) && $id != var_get_key('user', 'default_role', 2)){
			if($id && $id != var_get_key('user', 'anonymous_role', 1)){
			  db_exec('INSERT INTO {user_roles} (uid, rid) VALUES (?, ?)', array($uid, $id));
			}
		}
	}else if($rid && $rid != var_get_key('user', 'anonymous_role', 1)){
		db_exec('INSERT INTO {user_roles} (uid, rid) VALUES (?, ?)', array($uid, $rid));
	}
}

/**
 * 添加或更新角色
 * @param (array) $role
 */
function user_save_role($role = array()){
  $name = $role['name'];
  if(!$rid = db_query('SELECT rid FROM {role} WHERE name = ?', array($name), array('return' => 'column'))){
    if(db_exec('INSERT INTO {role} (name) VALUES (?)', array($name, ($role['perm'] ? serialize($role['perm']) : '')))){
      return db_last_insert_id();
    }
  }else if($role['perm']){
    db_exec('UPDATE {role} SET perm = ? WHERE rid = ?', array(($role['perm'] ? serialize($role['perm']) : ''), $rid));
  }
  return $rid;
}

/**
 * 写入用户
 * @param (object) $value
 *  将写入的用户数据，不做验证
 */
function user_insert($value){
  if(!isset($value->status)){
    $value->status = var_get_key('user', 'status', 1);
  }
  
  if(!isset($value->language) || $value->language == $GLOBALS['conf']['default_language']){
    $value->language = '';
  }
  
  if(!isset($value->theme)) $value->theme = '';
  $value->created = $_SERVER['REQUEST_TIME'];
  $value->session = $_COOKIE[session_name()];
  $value->host = ip_address();
  
  if(db_exec('INSERT INTO {users} (name, pass, mail, theme, language, created, status, active, login, count, host, session, data) VALUES (?, ?, ?, ?, ?, ?, ?, 0, 0, 0, ?, ?, ?)', array($value->name, md5($value->pass), $value->mail, $value->theme, $value->language, $value->created, $value->status, $value->host, $value->session, NULL))){
    if($value->uid = db_last_insert_id()){
      user_set_roles($value->uid, $v->rid);
      $value->roles = user_get_roles($uid);
      
      if(!var_get_key('user', 'status', 0)){
        _user_activation($uid, $value->name, $value->mail, $_SERVER['REQUEST_TIME']);
      }
      $value->nid = $value->uid;
      
      /**
       * 触发 hook_user_insert();
       */
      module_alter_all('user_insert', $value);
      
      field_get_node_save('user', 'field', $value);
      
      unset($value->pass);
      return $value;
    }
  }
}

/**
 * 帐号激活邮件
 */
function _user_activation($uid, $name, $mail, $time){
  $site = $GLOBALS['conf']['site_name'];
  $pass = dd_rand_str();
  if(db_exec('UPDATE {users} SET validate = ? WHERE uid = ?', array($pass, $uid))){
    $url = url('user/activation', array('query' => 'validate='. $pass .'&uid='. $uid, 'absolute' => true));
    dd_set_mail(
      array(array($mail, $name)),
      $site . ' 激活帐号', '亲爱的 '.$name.'<br />你于 '.format_date($time).' 在 '.$site.' 完成了注册，以下是你的帐号激活链接：'.$url.' <br />未激活之前，你的帐号无法登录。<br />多次获取激活链接，以最后一次为准。<br />若该帐号并非你本人注册，请忽略此邮件。<br />' . $site
    );
    return true;
  }
}

/**
 * 找回密码
 */
function _user_newpass($uid, $name, $mail){
  $site = $GLOBALS['conf']['site_name'];
  $str = dd_rand_str();
  $time = time();
  if(db_exec('UPDATE {users} SET newpass = ?, active = ? WHERE uid = ?', array($str, $time, $uid))){
    $url = url('user/pass', array('query' => 'type=newpass&str='. $str .'&uid='. $uid, 'absolute' => true));
    dd_set_mail(
      array(array($mail, $name)),
      $site . ' 找回密码',
      '亲爱的 '.$name.'<br />你于 '.format_date($time).' 在 '.$site.' 请求找回密码，以下是你的密码修改链接：'.$url.'<br />通过本链接你可直接修改密码，在修改密码之前，你的旧密码仍然可以登录。<br />本链接在24小时内有效，且只能使用一次，多次找回，以最后一次为准。<br />' . $site
    );
    return true;
  }
}

/**
 * 获取角色
 */
function user_get_roles($uid){
  static $roles;
  if(!isset($roles[$uid])){
    if($uid > 0){
      if($fetch = db_query('SELECT r.rid, r.name FROM {role} r INNER JOIN {user_roles} u ON r.rid = u.rid WHERE u.uid = ?', array($uid))){
        foreach($fetch as $r){
          $roles[$uid][$r->rid] = $r->name;
        }
      }
      if(!$roles) {
        $default_role = user_data_roles(var_get_key('user', 'default_role', 2));
        $roles[$uid][$default_role->rid] = $default_role->name;
      }
    }else{
      $roles[$uid][var_get_key('user', 'anonymous_role', 1)] = var_get_key('user', 'anonymous', '游客');
    }
  }
  return $roles[$uid];
}

/**
 * 获取用户文件限额
 */
function user_get_file_size($uid){
  static $limit;
  if(!isset($limit[$uid])){
    /**
     * 规则如下：
     * 优先查询用户所属角色组设置，选取最大额度，作为限额。
     * user_file_size_role_{rid}：角色设置若为 0，则表示按默认容量
     * user_file_size：默认容量若为 0，则表示不限制
     */
    if($uid > 0){
      global $user;
      if($uid == $user->uid){
        $roles = $user->roles;
      }else{
        $roles = user_get_roles($uid);
      }
      
      $limit[$uid] = 0;
      foreach($roles as $rid => $role){
        $size = var_get('user_file_size_role_'.$rid, 0);
        if($limit[$uid] < $size){
          $limit[$uid] = $size;
        }
      }
      if(!$limit[$uid]){
        $limit[$uid] = var_get('user_file_size', 30);
      }
    }else{
      // 游客不限额
      $limit[0] = 0;
    }
  }
  return $limit[$uid];
}

/**
 * 角色信息缓存
 */
function user_data_roles($rid = NULL){
  static $roles;
  if(!isset($roles)){
    if($cache = cache_get('user_roles')){
      $roles = $cache->data;
    }else{
      if($fetch = db_query('SELECT * FROM {role} ORDER BY rid ASC')){
        foreach($fetch as $o){
          $roles[$o->rid] = $o;
        }
        cache_set('user_roles', $roles);
      }
    }
  }
  return $roles[$rid]  ? $roles[$rid] : $roles;
}

function user_roles_opt(){
  $opt = array();
  if($roles = user_data_roles()){
    foreach($roles as $role){
      $opt[$role->rid] = $role->name;
    }
  }
  return $opt;
}

/**
 * 登录表单
 */
function user_login_form($url = NULL){
  global $conf;
  if(!$url){
    if($q = dd_query_string_encode($_REQUEST, array_merge(array('q', 'ajax'), array_keys($_COOKIE)))){
      $q = '&' . $q;
    }
    if(strpos($_GET['q'], 'user/login') !== false){
      $path = $_GET['q'];
    }else{
      $path = 'user/login/ajax';
      $q .= '&redirect='.urlencode($_SERVER['REQUEST_URI']);
    }
    $url = url($path, array('query' => 'ajax=submit' .$q));
  }
  $form['settings'] = array(
    '#validate' => array('user_login_validate'),
    '#ajax_validate' => true,
    '#ajax_submit' => array(
      'des' => true,
      'options' => array(
        'dataType' => 'script',
        'url' => $url,
      ),
    ),
  );
  $form['fields']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('user', '邮箱'),
    '#required' => true,
    '#default_value' => $ac[0],
    '#attributes' => array(
      'id' => 'user_login',
      'size' => 20,
      'class' => "{required:true, messages:{required:'".t('user', '请输入邮箱')."'}}"
    ),
    '#description' => l(t('user', '未注册？'), 'user/register', array('attributes' => array('target' => '_parent')))
  );
  $form['fields']['pass'] = array(
    '#type' => 'password',
    '#title' => t('user', '密码'),
    '#required' => true,
    '#attributes' => array(
      'size' => 20,
      'class' => "{required:true, messages:{required:'". t('user', '请输入密码')."'}}"
    ),
    '#description' => l('忘记密码？', 'user/pass', array('attributes' => array('target' => '_parent')))
  );
  if($conf['captcha']['user_login']['data']){
    $form['fields']['captcha'] = array(
      '#type' => 'captcha',
      '#required' => true,
      '#title' => t('user', '验证'),
      '#captcha' => array(
        'image' => $conf['captcha']['user_login']['image'] ? '50x16' : 0,
        'type' => $conf['captcha']['user_login']['type']
      )
    );
  }
  
  module_alter_all('user_login_form', $form);
  
  $form['fields']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('user', '确认登录'),
    '#weight' => 100,
    '#prefix' => '<div id="user_login_form_submit" class="form_item form_item_submit">',
  );
  
  $form['fields']['his'] = array(
    '#type' => 'checkbox',
    '#weight' => 101,
    '#options' => array(1 => t('user', '记住我')),
    '#suffix' => '</div>'
  );
  return $form;
}

/**
 * 登录验证
 */
function user_login_validate($form, $value){
  if($user = db_query('SELECT uid, status FROM {users} WHERE mail = ? AND pass = ?', array($value['mail'], md5($value['pass'])), array('return' => 'one'))){
    if(!$error = module_invoke_all('user_login_validate', $form, $value)){
      if($msg = _user_login_validate($user, $value)){
        if($msg === true){
          if($_GET['ajax'] != 'submit'){
            dd_goto(dd_get_token(var_get_key('user', 'redirect', 'user/' . $_SESSION['user']->uid), $_SESSION['user'], array('user')));
          }
        }else{
          $error = $msg;
        }
      }else{
        dd_set_message(t('user', '登录失败'), 'error');
        return true;
      }
    }
  }else{
    $error['pass']['#error'][] = t('user', '帐号与密码不匹配');
  }
  return $error;
}

function _user_login_validate($ac, $value){
  if($ac->uid){
    switch($ac->status){
      case 0:
        $t['name']['#error'][] = t('user', '账号还未激活，<a href="!url">立即激活</a>', array('!url' => url('user/activation')));
      break;
      case 2:
        $t['name']['#error'][] = t('user', '账号已冻结');
      break;
      case 3:
        $t['name']['#error'][] = t('user', '账号已注销');
    }
    if($t) return $t;
    if(!$value['his'][1]) {
      global $cookie_domain;
      setcookie(session_name(), session_id(), -1, '/', $cookie_domain);
    }
    if(user_login(user_load($ac->uid))){
      return true;
    }
  }else{
    $t['name']['#error'][] = t('user', '密码不匹配');
  }
  return $t;
}

/**
 * 载入用户信息，触发 hook_user_load()
 */
function user_load($uid){
  static $ac;
  if(!isset($ac[$uid])){
  	global $conf;
  	$ac[$uid] = new stdClass();
    
    if($ac[$uid] = db_query('SELECT * FROM {users} WHERE uid = ?', array($uid), array('return' => 'one'))){
      
      unset($ac[$uid]->pass);
      
      if(!$ac[$uid]->language || !$conf['languages'][$ac[$uid]->language]){
      	$ac[$uid]->language = NULL;
      }
      $ac[$uid]->roles = user_get_roles($ac[$uid]->uid);
      
      if($ac[$uid]->data) {
      	$ac[$uid]->data = unserialize($ac[$uid]->data);
      }else{
      	$ac[$uid]->data = array();
      }
      
      /**
       * 加载用户信息
       * 触发 hook_user_load();
       */
      $ac[$uid]->nid = $ac[$uid]->uid;
      
      field_get_node_load('user', 'field', $ac[$uid]);
      
      module_alter_all('user_load', $ac[$uid]);
    }
  }
  return $ac[$uid];
}

/**
 * 用户登录，触发 hook_user_login()
 */
function user_login($user){
  user_session_reg($user);
  /**
   * 登陆成功
   * 触发 hook_user_login();
   */
  module_alter_all('user_login', $user);
  return $user;
}

/**
 * 登录更新 session
 */
function user_session_reg(&$ac) {
  global $cookie_domain;
  $ac->prevhost = $ac->host;
  $ac->prevlogin = $ac->login;
  $ac->host = ip_address();
  
  session_unset();
  unset($ac->pass);
  unset($ac->init);
  setcookie('time',$_SERVER['REQUEST_TIME'], $_SERVER['REQUEST_TIME'] + 31536000, '/', $cookie_domain);
  
  $_SESSION['user'] = $ac;
  session_regenerate_id();
  
  if(!$_POST['__SETPHPSESSID'] && !$_POST['__SETUID']){
    db_exec('UPDATE {users} SET login = ?, count = count + 1, session = ?, host = ?, active = ? WHERE uid = ?', array($_SERVER['REQUEST_TIME'], session_id(), ip_address(), $_SERVER['REQUEST_TIME'], $ac->uid));
  }else{
    $_SESSION['user']->__SETVALIDATE = $_SERVER['REQUEST_TIME'];
  }
  $ac->session = session_id();
}

function user_clear_session($uid){
  if($u = user_load($uid)){
    global $user;
    $user = $_SESSION['user'] = $u;
  }
}

/**
 * @Implement of hook_system_site_captcha()
 */
function user_system_site_captcha($op){
  if($op == 'fields'){
    return array(
      'user_login' => array(
        'title' => t('user', '登录'),
        // 'attributes' => array() // 自定义表单字段参数
      ),
      'user_register' => array(
        'title' => t('user', '注册'),
      ),
    );
  }
}

/**
 * @Implement of hook_site_menu()
 */
function user_site_menu(&$menu){
  global $user;
  
  $menu['front'] = array(
    '#data' => l(t('user', '首页'), NULL),
    '#weight' => -1000,
  );
  
  if(!$user->uid){
    $menu['user'] = array(
        'login' => array(
          '#weight' => 999,
          '#data' => l(t('user', '登录'), 'user/login'),
          '#childrens' => array(
            l(t('user', '找回密码'), 'user/pass')
          )
        )
    );
    if(user_is_register()){
      $menu['user']['register'] = array(
        '#data' => l(t('user', '注册'), 'user/register'),
        '#weight' => 1000
      );
    }
  }else{
    if($user->uid == 1){
      $menu['admin'] = array(
        '#weight' => 999,
        '#data' => l(t('user', '管理'), 'admin'),
        '#childrens' => array(
          l(t('user', '缓存管理'), 'admin/cache'),
          l(t('user', '模块管理'), 'admin/modules'),
          l(t('user', '主题管理'), 'admin/themes'),
          l(t('user', '模块管理'), 'admin/modules'),
          l(t('user', '用户设置'), 'admin/users/settings'),
          l(t('user', '站点设置'), 'admin/settings'),
        )
      );
    }
    $menu['user'] = array(
      '#weight' => 1000,
      '#data' => l($user->name, 'user/'.$user->uid),
      '#childrens' => array(
        l(t('user', '修改密码'), 'user/newpass'),
        l(t('user', '安全离开'), 'user/logout'),
      )
    );
  }
}

/**
 * @Implement of hook_token_replace()
 */
function user_token_replace($text, $value = NULL){
	if(!is_object($value)) $value = $GLOBALS['user'];
	$args = array(
		'[uid]' => $value->uid,
		'[name]' => $value->name,
		'[mail]' => $value->mail,
		'[theme]' => $value->theme,
		'[language]' => $value->language,
		'[created]' => $value->created,
	);
	return strtr($text, $args);
}

/**
 * @Implement of hook_token_list()
 */
function user_token_list(){
	return array(
		'[uid]' => array(
			'title' => t('user', '用户 id'),
		),
		'[name]' => array(
			'title' => t('user', '用户名'),
		),
		'[mail]' => array(
			'title' => t('user', '用户邮箱'),
		),
		'[theme]' => array(
			'title' => t('user', '用户主题'),
		),
		'[language]' => array(
			'title' => t('user', '用户语言'),
		),
		'[created]' => array(
			'title' => t('user', '注册时间'),
		)
	);
}

/**
 * @Implement of hook_field_call_group()
 */
function user_field_call_group($type = NULL){
  $groups = array(
    'field' => array(
    	'title' => t('user', '用户字段'),
      'sum' => 0,
      //'term' => 1, // 只允许添加传统型分类，即 标签、下拉框、单选、复选
      //'type' => array('tags'), // 允许的类型，优先级高于 term
    	'level' => 0, // 分类层级级数，0 则为不限制(实际最多 10 级)
      //'description' => t('user', '描述'),
    )
  );
  return $type ? $groups[$type] : $groups;
}

/**
 * @Implement of hook_field_get_node_access()
 *   自定义字段权限
 */
function user_field_get_node_access($op, $field, $node = NULL, $ac){
  global $user;
  if($field->module == 'user' && $field->type == 'field'){
    switch($op){
      case 'view':
        if($user->uid == 1) return true;
        switch($field->data['access']['display']){
          case 0:
            return true;
          break;
          case 1:
            return $node->uid == $ac->uid;
        }
      break;
      case 'update':
        if($user->uid == 1) return true;
        if($field->data['access']['input'][3]){
          return $user->uid == 1;
        }else if($ac->uid > 0){
          return $field->data['access']['input'][2];
        }else{
          return $field->data['access']['input'][1];
        }
    }
  }
}

/**
 * @Implement of hook_field_call_form()
 */
function user_field_call_form(&$field, &$form){
  if($field->module !== 'user') return;
  
  $form['fields']['data']['access']['input'] = array(
    '#type' => 'checkbox',
    '#title' => t('user', '填写'),
    '#default_value' => $field->data['access']['input'],
    '#options' => array(
      1 => t('user', '注册时填写'),
      2 => t('user', '编辑时填写'),
      3 => t('user', '只允许管理员填写'),
    )
  );
  $form['fields']['data']['access']['display'] = array(
    '#type' => 'radio',
    '#title' => t('user', '查看'),
    '#default_value' => $field->data['access']['display'],
    '#options' => array(
      t('user', '允许所有人查看'),
      t('user', '只允许自己查看'),
      t('user', '仅管理员可查看'),
    )
  );
  if(in_array($field->field_type, field_get_term_type())){
    $form['fields']['data']['index'] = array(
      '#type' => 'checkbox',
      '#title' => t('user', '索引'),
      '#default_value' => $field->data['index'],
      '#description' => t('user', '以链接索引具有相同选择的用户')
    );
  }
}

/**
 * 输出用户链接
 * @param (object) $ac
 */
function theme_username($ac){
  if($ac->uid > 0){
    $output = l($ac->name, 'user/'.$ac->uid);
  }else{
    $output = ($ac->name ? $ac->name : var_get_key('user', 'anonymous', t('user', '游客'))) . '(<em>未登录</em>)';
  }
  return $output;
}

/**
 * @Implement of hook_alias_reservation()
 */
function user_alias_reservation(){
	return array('user/');
}

/**
 * @Implement of hook_share_fav()
 */
function user_share_fav(){
  return array(
    'qq_huqian' => array(
      'title' => 'QQ 书签',
      'href' => 'http://shuqian.qq.com/post?title=<title>&uri=<url>',
      'icon' => 'misc/icon/share_qq.gif',
    ),
    'baidu_cang' => array(
      'title' => 'Baidu 搜藏',
      'href' => 'http://cang.baidu.com/do/add?it=<title>&iu=<url>',
      'icon' => 'misc/icon/share_baidu.gif',
    ),
    'google_bookmark' => array(
      'title' => 'Google 书签',
      'href' => 'http://www.google.com/bookmarks/mark?op=edit&bkmk=<url>&title=<title>',
      'icon' => 'misc/icon/share_google.gif',
    ),
    'kaixin001' => array(
      'title' => '开心网',
      'href' => 'http://www.kaixin001.com/repaste/share.php?rurl=<url>&rcontent=<url>&rtitle=<title>',
      'icon' => 'misc/icon/share_kaixin.gif',
    ),
    'renren' => array(
      'title' => '人人网',
      'href' => 'http://share.renren.com/share/buttonshare.do?link=<url>&title=<title>',
      'icon' => 'misc/icon/share_renren.gif',
    ),
    'douban' => array(
      'title' => '豆瓣网',
      'href' => 'http://www.douban.com/recommend/?url=<url>&title=<title>',
      'icon' => 'misc/icon/share_douban.gif',
    ),
    'sina_t' => array(
      'title' => '新浪微博',
      'href' => 'http://v.t.sina.com.cn/share/share.php?url=<url>&title=<title>',
      'icon' => 'misc/icon/share_sina.gif',
    ),
  );
}
/**
 * @Implement of hook_theme()
 */
function user_theme(){
  return array(
		'username' => array(
		  'fun' => 'theme_username',
      'args' => array('account'),
		),
  );
}