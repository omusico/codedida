<?php
// $Id$

/**
 * @file
 *  field.module 实现表单字段定制
 */

/**
 * @Implement of hook_menu()
 */
function field_menu() {
  $items = array();
  $items['fields/%'] = array(
    'load_functions' => array(1 => array('field_load')),
    'access_callback' => 'field_access',
    'access_arguments' => array('view', 1),
    'page_callback' => 'field_page',
    'page_arguments' => array(1),
    'file' => 'field.page.inc'
  );
  $items['category/%'] = array(
    'load_functions' => array(1 => array('field_term_load')),
    'access_callback' => 'field_term_access',
    'access_arguments' => array(1),
    'page_callback' => 'field_term_page',
    'page_arguments' => array(1),
    'file' => 'field.page.inc'
  );
  $items['category/%/feed'] = array(
    'load_functions' => array(1 => array('field_term_load')),
    'access_callback' => 'field_term_access',
    'access_arguments' => array(1),
    'page_callback' => 'field_term_feed',
    'page_arguments' => array(1),
    'file' => 'field.page.inc'
  );
  return $items;
}

/**
 * @Implement of hook_perm
 */
function field_perm() {
}

/**
 * @Implement of hook_system_tools_ajax()
 */
function field_system_tools_ajax($v, $g) {
  dd_set_header('Content-Type: text/plain; charset=utf-8');
  $json['error'] = 1;
  
  switch ($g['op']) {
    case 'select':
      if ($v['__default_value']) {
        if ($fetch = db_query('SELECT tid, name FROM {fields_term} WHERE field_id = ? AND pid = ? 
          ORDER BY weight ASC, tid ASC', array($g['fid'], $v['__default_value']))) {
          foreach ($fetch as $o) {
            $json['contents'][] = array('tid' => $o->tid, 'name' => $o->name);
          }
          $json['error'] = 0;
        }
      }
    break;
    case 'auto':
      if ($field = field_load($g['fid'])) {
        if ($field->data['validate']['type'] == 'custom_ok' && $field->data['validate']['settings']['values']) {
          $json['error'] = 0;
           switch ($field->data['validate']['settings']['value_type']) {
            case 1: // 普通模式
              $json['contents'] = dd_line_to_array($field->data['validate']['settings']['values'], 1);
            break;
            case 3: // php 模式
              $field_value = $v['value'];
              $field_type = 'autocomplete';
              $json['contents'] = eval($field->data['validate']['settings']['values']);
          }
        }
      }
  }
  
  return json_encode($json);
}


/**
 * 字段权限验证，uid == 1 例外
 * @param (string) $op
 *  默认分两种权限，即：view：浏览，update：填写
 *  字段依附于节点，故字段首先继承节点权限，如节点不允许浏览，字段也无法浏览
 * @param (object) $field
 *  字段数据，即 field_load() 返回的对象
 * @param (object) $ac
 *  用户信息，若留空，则取当前用户
 * @return
 *  通过验证返回 true，否则返回 false
 */

function field_access($op, $field, $node = NULL, $ac = NULL) {
  if (!$ac) $ac = $GLOBALS['user'];
  if ($ac->uid == 1) return true;
  
  static $access;
  if (!isset($access[$ac->uid])) {
    $access[$ac->uid] = array();
    $access[$ac->uid][$field->field_id] = array();
  }
  if (!isset($access[$ac->uid][$field->field_id][$op])) {
    $access[$ac->uid][$field->field_id][$op] = false;
    if ($field->data['access']) {
      $access[$ac->uid][$field->field_id][$op] = module_invoke_all('field_get_node_access', $op, $field, $node, $ac);
    } else if (!$field->access) {
      $access[$ac->uid][$field->field_id][$op] = true;
    } else if ($field->access[$op] && $ac->roles) {
      foreach ($ac->roles as $rid => $k) {
        if (in_array($rid, $field->access[$op])) {
          $access[$ac->uid][$field->field_id][$op] = true;
        }
      }
    }
  }
  return $access[$ac->uid][$field->field_id][$op];
}

/**
 * 读取字段类型参数，字段类型及参数由 hook_field_call_list() 定义
 * @param (string) $type
 *  字段类型系统名称，不传值则获取全部
 */
function field_get_call_lists($name = NULL) {
  static $lists;
  if (!isset($lists)) {
    $lists = array();
    if ($modules = _module_invoke_all('field_call_list')) {
      foreach ($modules as $module => $types) {
        foreach ($types as $key => $type) {
          $lists[$key] = $type;
          $lists[$key]['module'] = $module;
        }
      }
    }
  }
  return $name ? $lists[$name] : $lists;
}

/**
 * 读取所有字段类型，用于表单
 * @param (string) $name
 *  字段组名
 * @param (array) $group
 *  字段分组信息，根据相关设置过滤指定类型。默认返回全部。
 */
function field_get_type_options($name = 0, $group = array()) {
  static $options;
  if (!isset($options[$name])) {
    $options[$name] = array();
    if ($group) {
      if ($group['type'] && is_array($group['type'])) {
        // 指定类型
        foreach (field_get_call_lists() as $key => $value) {
          if (in_array($key, $group['type'])) {
            $options[$name][$key] = $value['title'];
          }
        }
      } else if ($group['term']) {
        $terms = field_get_term_type();
        foreach (field_get_call_lists() as $key => $value) {
          if (in_array($key, $terms)) {
            $options[$name][$key] = $value['title'];
          }
        }
      }
    }
    if (!$options[$name]) {
      foreach (field_get_call_lists() as $key => $value) {
        $options[$name][$key] = $value['title'];
      }
    }
  }
  return $options[$name];
}
/**
 * @Implement of hook_field_call_list()
 *  定义字段类型
 */
function field_field_call_list() {
  return array(
    'tags' => array(
      'title' => t('field', '标签'),
      'form_type' => 'textfield',
    ),
    'checkbox' => array(
      'title' => t('field', '复选框'),
      'form_type' => 'checkbox',
    ),
    'radio' => array(
      'title' => t('field', '选项按钮'),
      'form_type' => 'radio',
    ),
    'select' => array(
      'title' => t('field', '下拉单选框'),
      'form_type' => 'select',
    ),
    'selects' => array(
      'title' => t('field', '下拉复选框'),
      'form_type' => 'selects',
    ),
    'textfield' => array(
      'title' => t('field', '单行文本'),
      'form_type' => 'textfield',
    ),
    'textarea' => array(
      'title' => t('field', '多行文本'),
      'form_type' => 'textarea',
    ),
    'file' => array(
      'title' => t('field', '文件上传'),
      'form_type' => 'file',
    )
  );
}

/**
 * 验证日期和时间
 * @param (string) $v
 *  需要验证的字符串
 * @param (string) $type
 *  日期格式
 * @param (bool) $time
 *  是否有时间
 * 仅验证格式，不验证数值是否正确，如：9999-99-99 99:99:99 也是合法的
 * @returu (false or string)
 */
function field_validate_date($v, $format, $time = NULL) {
  if ($time) {
    $msg = t('field', '日期格式不正确');
    if (strpos($v, ' ') !== false && strpos($v, ':') !== false) {
      if ($a = explode(' ', $v, 2)) {
        if (preg_match('/\w\w:\w\w:\w\w$/', $a[1])) {
           $msg = false;
        }
      }
    }
    $v = $a[0];
  }
  
  if ($msg) {
    return $msg;
  } else {
    $msg = t('field', '日期格式不正确');
  }
  
  switch ($format) {
    case 'yy-mm-dd':
      if (strpos($v, '-') !== false && preg_match('/\w{4}-\w\w-\w\w$/', $v)) {
        $msg = false;
      }
    break;
    case 'mm/dd/yy':
      if (strpos($v, '/') !== false && preg_match('/\w\w-\w\w-\w{4}$/', $v)) {
        $msg = false;
      }
    break;
  }
  
  return $msg;
}

/**
 * @Implement of hook_field_type_textfield()
 * 单行文本字段接口
 * @param (string)$op
 *  操作类型
 * @param (string) $type
 *  字段输入类型
 * @param (object) $field
 *  字段所有数据
 * @param (string) $v
 *  节点中的字段输入数据
 */
function field_field_type_textfield($op, $type = NULL, $field = NULL, $v = NULL) {
  $set = $field->data['validate']['settings'];
  switch ($op) {
    case 'node_form':
      static $i = 0;
      ++$i;
      switch ($type) {
        case 'date': case 'date_time':
          $dom = 'ui_data_click_'.$i;
          if ($set['datepicker']) {
            $js = array(
              'dom' => '.'.$dom,
              'dateFormat' => $set['value_type'],
            );
            
            if ($type == 'date_time') {
              $js['showTime'] = true;
            }
            if ($set['changeYear']) {
              $js['changeYear'] = true;
            }
            if ($set['changeMonth']) {
              $js['changeMonth'] = true;
            }
           if ($set['yearRange']) {
              $js['yearRange'] = $set['yearRange'];
            }
            if ($set['maxDate']) {
              $js['maxDate'] = $set['maxDate'];
            }
            if ($set['minDate']) {
              $js['minDate'] = $set['minDate'];
            }
            if ($set['start_or_end'] && $set['field_key']) {
              $js[$set['start_or_end']] = 'input[name=\'fields['.$set['field_key'].']\']';
            }
            dd_add_js(array('uidata' => array($js)), 'setting');
          }
          
          dd_jqui();
          
        return array('#attributes' => array('class' => 'ui_data_click '.$dom));
        case 'custom_ok':
          $dom = 'ui_field_textfield_autocomplete_'.$i;
        return array(
          '#attributes' => array('class' => 'ui_field_autocomplete '.$dom),
          '#autocomplete' => array(
            'url' => url('ajax', array('query' => 'fid='.$field->field_id.'&op=auto&module=field')),
            'dom' => '.'.$dom,
            'range' => true
          )
        );
      }
    break;
    case 'node_save':
    break;
    case 'node_validate':
      // 节点验证
      if (!isset($v)) break;
      
      $showtime = 0;
      $error = '';
      switch ($type) {
        case 'figure':
          if (preg_match('/[^0-9]/', $v)) {
            $error = t('field', '!string 只能是数字', array('!string' => $field->name));
          }
        break;
        case 'letter':
          if (preg_match('/[^a-z]/i', $v)) {
            $error = t('field', '!string 只能是字母', array('!string' => $field->name));
          }
        break;
        case 'figure_letter':
          if (preg_match('/[^a-z0-9]/i', $v)) {
            $error = t('field', '!string 只能是字母和数字', array('!string' => $field->name));
          }
        break;
        case 'mail':
          $error = form_vali_mail($v);
        break;
        case 'date_time':
          $showtime = 1;
        case 'date':
          static $start_or_end;
          if (!$error = field_validate_date($v, $set['value_type'], $showtime)) {
            if ($set['start_or_end'] && $set['field_key']) {
              if (!isset($start_or_end[$set['field_key']])) {
                $start_or_end[$field->field_key] = (float)preg_replace(array('/\s/', '/[^\w]/'), array('.', ''), $v);
              } else if ($set['start_or_end'] == 'start') {
                // 开始字段
                if (intval($v) >= $start_or_end[$set['field_key']]) {
                  $error = t('field', '开始日期不能大于结束日期');
                }
              } else {
                // 结束字段
                if ((float)preg_replace(array('/\s/', '/[^\w]/'), array('.', ''), $v) <= $start_or_end[$set['field_key']]) {
                  $error = t('field', '开始日期不能大于结束日期');
                }
              }
            }
          }
        break;
        case 'chinese':
          if (preg_match("/[^\x{4e00}-\x{9fa5}]+$/u", $v)) {
            $error = t('field', '!string 只能是中文', array('!string' => $field->name));
          }
        break;
        case 'custom_ok':
          $e = false;
          switch ($set['value_type']) {
            case 1: // 普通模式
              $values = dd_line_to_array($set['values'], 1);
              if (array_search($v, $values) === false) {
                $e = true;
              }
            break;
            case 2: // 正则模式
              if (!preg_match($set['values'], $v)) {
                $e = true;
              }
            break;
            case 3: // php 模式
              $field_value = $v;
              if (eval($set['values']) == false) {
                $e = true;
              }
            break;
            default:
              $e = true;
          }
          if ($e) {
            $error = t('field', '!string 的值不被允许', array('!string' => $field->name));
          }
        break;
        case 'url':
          if (!preg_match('/https?:\/\/([a-z0-9]*?)\.(.*)/i', $v)) {
            $error = t('field', '请输入正确的网址，如：http://www.didaah.org/');
          }
        break;  
        case 'custom_not':
          switch ($set['value_type']) {
            case 1: // 普通模式
              $values = dd_line_to_array($set['values'], 1);
              if (array_search($v, $values) !== false) {
                $e = true;
              }
            break;
            case 2: // 正则模式
              if (preg_match($set['values'], $v)) {
                $e = true;
              }
            break;
            case 3: // php 模式
              $field_value = $v;
              if (eval($set['values']) == false) {
                $e = true;
              }
            break;
            default:
              $e = true;
          }
          if ($e) {
            $error = t('field', '!string 的值不被允许', array('!string' => $field->name));
          }
      }
      
      if ($error) {
        dd_set_message($error, 'error');
        return $error;
      }
    break;
    case 'validate':
      // 字段验证
      if ($field->data['validate']['settings']['start_or_end'] && ($type == 'date' || $type == 'date_time')) {
        if ($field->data['validate']['settings']['field_key'] == $field->field_key) {
          dd_set_message(t('field', '不能关联自己'), 'error');
          return true;
        }
      }
    break;
    case 'save':
      // 字段保存
    break;
    case 'setting':
      $value = $field->data['validate']['settings'];
      $custom_fields = array(
        'value_type' => array(
          '#type' => 'radio',
          '#title' => t('field', '匹配模式'),
          '#default_value' => $value['value_type'],
          '#options' => array(
            1 => t('field', '普通模式'),
            2 => t('block', '正则模式'),
            3 => t('block', 'PHP 模式')
          )
        ),
        'values' => array(
          '#type' => 'textarea',
          '#default_value' => $value['values'],
          '#attributes' => array('rows' => 6, 'cols' => 60),
          '#description' => theme('item_list', array(
              t('field', '模式说明：'),
              t('field', '普通模式：一行一条记录，首尾空格将被清除'),
              t('field', '正则模式：符合PHP标准的正则表达式。以斜杠开头，如：/a.*z/ 表示字符串以a开头，以z结尾'),
              t('field', 'PHP模式：不包含 php 标签，必须用 return 而不是 echo，返回 false 或 true 或 数组，false 表示未通过验证。可用变量：$field_value - 当前输入值，$field - 当前字段，$field_type - 操作类型')
            )
          )
        )
      );
      $data_fields = array(
        'value_type' => array(
          '#type' => 'select',
          '#title' => t('field', '日期格式'),
          '#default_value' => $value['value_type'],
          '#options' => array(
            'yy-mm-dd' => 'yy-mm-dd',
            'mm/dd/yy' => 'mm/dd/yy'
          )
        ),
        'datepicker' => array(
          '#type' => 'radio',
          '#title' => t('field', '日期控件'),
          '#default_value' => isset($value['datepicker']) ? $value['datepicker'] : 1,
          '#options' => array(t('field', '不启用'), t('field', '启用')),
          '#description' => t('field', 'js 日期选择控件，便于用户选择日期。只有启用以下选项方有效')
        ),
        'changeYear' => array(
          '#type' => 'radio',
          '#title' => t('field', '年份下拉'),
          '#default_value' => $value['changeYear'],
          '#options' => array(t('field', '否'), t('field', '是')),
        ),
        'changeMonth' => array(
          '#type' => 'radio',
          '#title' => t('field', '月份下拉'),
          '#default_value' => $value['changeMonth'],
          '#options' => array(t('field', '否'), t('field', '是')),
        ),
        'yearRange' => array(
          '#type' => 'textfield',
          '#title' => t('field', '年份范围'),
          '#default_value' => $value['yearRange'],
          '#description' => t('field', '显示在下拉框中，可以是绝对值，如：1949:2049，或相对值，如：-10:+10'),
        ),
        'maxDate' => array(
          '#type' => 'textfield',
          '#title' => t('field', '最大日期'),
          '#default_value' => $value['maxDate'],
          '#description' => t('field', '可以是绝对值，如：2010-01-22，或相对值，如：+1y +1m +1w +1d'),
        ),
        'minDate' => array(
          '#type' => 'textfield',
          '#title' => t('field', '最小日期'),
          '#default_value' => $value['minDate'],
          '#description' => t('field', '可以是绝对值，如：2008-01-22，或相对值，如：-1y -1m -1w -1d'),
        ),
        'start_or_end' => array(
          '#type' => 'select',
          '#title' => t('field', '字段关联'),
          '#default_value' => $value['start_or_end'],
          '#options' => array(
            t('field', '不需要'),
            'start' => t('field', '做为开始日期'),
            'end' => t('field', '做为结束日期'),
          ),
          '#description' => t('field', '将两个日期字段关联起来，一个做为开始日期，一个做为结束日期'),
        ),
        'field_key' => array(
          '#type' => 'textfield',
          '#title' => t('field', '另一个字段'),
          '#default_value' => $value['field_key'],
          '#description' => t('field', '请输入需要关联的另一个字段的索引名称'),
        ),
      );
    return array(
      'date' => array(
        'title' => t('field', '日期'),
        'fields' => $data_fields
      ),
      'date_time' => array(
        'title' => t('field', '日期和时间'),
        'fields' => $data_fields
      ),
      'mail' => array(
        'title' => t('field', '电子邮件')
      ),
      'figure' => array(
        'title' => t('field', '只允许数字'),
      ),
      'letter' => array(
        'title' => t('field', '只允许字母'),
      ),
      'figure_letter' => array(
        'title' => t('field', '数字字母混合'),
      ),
      'chinese' => array(
        'title' => t('field', '只允许中文'),
      ),
      'url' => array(
        'title' => t('field', '只允许网址'),
      ),
      'custom_ok' => array(
        'title' => t('field', '自定义(允许特定值)'),
        'fields' => $custom_fields,
      ),
      'custom_not' => array(
        'title' => t('field', '自定义(不允许特定值)'),
        'fields' => $custom_fields,
      ),
    );
  }
}

function field_field_type_tags($op, $type = NULL, $field = NULL, $v = NULL) {
  $set = $field->data['validate']['settings'];
  switch ($op) {
    case 'node_form':
      static $i = 0;
      ++$i;
      switch ($type) {
        case 'custom_ok':
          $dom = 'ui_field_tags_autocomplete_'.$i;
        return array(
          '#attributes' => array('class' => 'ui_field_autocomplete '.$dom),
          '#autocomplete' => array(
            'url' => url('ajax', array('query' => 'fid='.$field->field_id.'&op=auto&module=field')),
            'dom' => '.'.$dom,
            'range' => true
          )
        );
      }
    break;
    case 'node_save':
    break;
    case 'node_validate':
      // 节点验证
      if (!isset($v)) break;
      
      $showtime = 0;
      
      switch ($type) {
        case 'custom_ok':
          $e = false;
          switch ($set['value_type']) {
            case 1: // 普通模式
              $values = dd_line_to_array($set['values'], 1);
              if (array_search($v, $values) === false) {
                $e = true;
              }
            break;
            case 2: // 正则模式
              if (!preg_match($set['values'], $v)) {
                $e = true;
              }
            break;
            case 3: // php 模式
              $field_value = $v;
              if (eval($set['values']) == false) {
                $e = true;
              }
            break;
            default:
              $e = true;
          }
          if ($e) {
            $error = t('field', '!string 的值不被允许', array('!string' => $field->name));
            dd_set_message($error, 'error');
            return array($error);
          }
        break;
        case 'custom_not':
          switch ($set['value_type']) {
            case 1: // 普通模式
              $values = dd_line_to_array($set['values'], 1);
              if (array_search($v, $values) !== false) {
                $e = true;
              }
            break;
            case 2: // 正则模式
              if (preg_match($set['values'], $v)) {
                $e = true;
              }
            break;
            case 3: // php 模式
              $field_value = $v;
              if (eval($set['values']) == false) {
                $e = true;
              }
            break;
            default:
              $e = true;
          }
          if ($e) {
            $error = t('field', '!string 的值不被允许', array('!string' => $field->name));
            dd_set_message($error, 'error');
            return array($error);
          }
      }
    break;
    case 'setting':
      $value = $field->data['validate']['settings'];
      $custom_fields = array(
        'value_type' => array(
          '#type' => 'radio',
          '#title' => t('field', '匹配模式'),
          '#default_value' => $value['value_type'],
          '#options' => array(
            1 => t('field', '普通模式'),
            2 => t('block', '正则模式'),
            3 => t('block', 'PHP 模式')
          )
        ),
        'values' => array(
          '#type' => 'textarea',
          '#default_value' => $value['values'],
          '#attributes' => array('rows' => 6, 'cols' => 60),
          '#description' => theme('item_list', array(
              t('field', '模式说明：'),
              t('field', '普通模式：一行一条记录，首尾空格将被清除'),
              t('field', '正则模式：符合PHP标准的正则表达式。以斜杠开头，如：/a.*z/ 表示字符串以a开头，以z结尾'),
              t('field', 'PHP模式：不包含 php 标签，必须用 return 而不是 echo，返回 false 或 true 或 数组，false 表示未通过验证。可用变量：$field_value - 当前输入值，$field - 当前字段，$field_type - 操作类型')
           )
          )
        )
      );
    return array(
      'custom_ok' => array(
        'title' => t('field', '自定义(允许特定值)'),
        'fields' => $custom_fields,
      ),
      'custom_not' => array(
        'title' => t('field', '自定义(不允许特定值)'),
        'fields' => $custom_fields,
      ),
    );
  }
}

/**
 * @Implement of hook_field_call_form()
 *  在添加/更新表单中增加自定义项目
 */
function field_field_call_form($field, &$form) {
  if ($field->field_type == 'textarea') {
    $form['fields']['data']['format'] = filter_form_field($field->data['format']);
    $form['fields']['data']['validate'] = array(
      '#fieldset_prefix' => 'asc',
      '#fieldset_legend' => t('field', '高级设置'),
      '#fieldset_suffix' => 1,
      '#fieldset' => true,
    );
    $form['fields']['data']['validate']['maxsize'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '最大长度'),
      '#weight' => -3,
      '#default_value' => $field->data['validate']['maxsize'],
      '#description' => t('field', '汉字、字母、数字均算做一个字符')
    );
    $form['fields']['data']['validate']['minsize'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '最小长度'),
      '#weight' => -2,
      '#default_value' => $field->data['validate']['minsize']
    );
  } else if ($field->field_type == 'textfield') {
    $form['fields']['data']['validate'] = array(
      '#fieldset_prefix' => 'asc',
      '#fieldset_legend' => t('field', '高级设置'),
      '#fieldset_suffix' => 1,
      '#fieldset' => true,
    );
    $form['fields']['data']['validate']['maxsize'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '最大长度'),
      '#weight' => -4,
      '#default_value' => $field->data['validate']['maxsize'],
      '#description' => t('field', '单行文本最大不超过 255 个字符。汉字、字母、数字均算做一个字符')
    );
    $form['fields']['data']['validate']['minsize'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '最小长度'),
      '#weight' => -3,
      '#default_value' => $field->data['validate']['minsize']
    );
    $form['fields']['data']['validate']['unique'] = array(
      '#type' => 'radio',
      '#title' => t('field', '唯一值'),
      '#weight' => -2,
      '#options' => array(t('field', '否'), t('field', '是')),
      '#default_value' => $field->data['validate']['unique'],
      '#description' => t('field', '不允许重复值')
    );   
    $options[0] = t('field', '任意');
    
    dd_add_js('modules/field/field.admin.js');
    
    if ($opt = module_invoke_all('field_type_textfield', 'setting', NULL, $field)) {
      if ($_POST['data']) {
        $data_type = $_POST['data']['validate']['type'];
      } else {
        $data_type = $field->data['validate']['type'];
      }
      $coustom_field = false;
      foreach ($opt as $key => $o) {
        $options[$key] = $o['title'];
        if ($o['fields']) {
          
          foreach ($o['fields'] as $field_key => $c) {
            unset($o['fields']['#required']);
          }
          
          // 自定义配置字段
          $form['fields']['data']['validate']['settings'][$key] = $o['fields'];
          $coustom_field = true;
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_prefix'] = 'asc';
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_legend'] = t('field', '自定义参数');
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_suffix'] = 1;
          $form['fields']['data']['validate']['settings'][$key]['#fieldset'] = true;
          
          if ($data_type == $key) {
            $display = 'block';
          } else {
            $display = 'none';
          }
          
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_attributes'] = array(
            'class' => 'field_type_textfield_settings field_type_textfield_settings_'.$key,
            'style' => 'display: '.$display.';'
          );
        }
      }
      if (!$coustom_field) {
        $form['fields']['data']['validate']['settings'] = NULL;
      }
    }
    $form['fields']['data']['validate']['type'] = array(
      '#type' => 'select',
      '#title' => t('field', '输入类型'),
      '#default_value' => $field->data['validate']['type'],
      '#options' => $options,
      '#weight' => -1,
      '#description' => t('field', '此字段允许输入的值。')
    );
  } else if ($field->field_type == 'file') {
    $form['fields']['data']['multi'] = array(
      '#type' => 'select',
      '#title' => t('field', '数量'),
      '#default_value' => $field->data['multi'] ? $field->data['multi'] : 0,
      '#options' => array(1 => 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20),
      '#description' => t('field', '可同时上传多个文件，默认为  1 个')
    );
    $form['fields']['data']['filetype'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '类型'),
      '#default_value' => $field->data['filetype'] ? implode('|', $field->data['filetype']) : '',
      '#description' => t('field', '允许的文件类型，留空为不限。以|分隔，如：jpg|gif')
    );
    $form['fields']['data']['filesize'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '大小'),
      '#default_value' => $field->data['filesize'],
      '#description' => t('field', '允许的文件大小，单位KB，留空为不限')
    );
    $form['fields']['data']['filename'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '名称'),
      '#default_value' => $field->data['filename'],
      '#description' => t('field', '指定文件名称，可使用<a href="!url">通配符</a>，建议留空', array('!url' => url('admin/token')))
    );
    $form['fields']['data']['extension'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '扩展'),
      '#default_value' => $field->data['extension'],
      '#description' => t('field', '指定文件扩展名，建议留空')
    );
    $form['fields']['data']['thumbs']['thumb'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '小图'),
      '#default_value' => $field->data['thumbs']['thumb'] ? $field->data['thumbs']['thumb'] : '85x85',
      '#description' => t('field', '缩略图尺寸，如：85x85')
    );
    $form['fields']['data']['thumbs']['medium'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '中图'),
      '#default_value' => $field->data['thumbs']['medium'] ? $field->data['thumbs']['medium'] : '200x200',
      '#description' => t('field', '适中图尺寸，如：200x200')
    );
    $form['fields']['data']['savepath'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '路径'),
      '#default_value' => $field->data['savepath'],
      '#description' => t('field', '文件保存路径，留空则使用用户默认文件路径')
    );
  } else if ($field->field_type == 'tags') {
    $form['fields']['data']['validate'] = array(
      '#fieldset_prefix' => 'asc',
      '#fieldset_legend' => t('field', '高级设置'),
      '#fieldset_suffix' => 1,
      '#fieldset' => true,
    );
    $form['fields']['data']['validate']['maxsize'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '最大长度'),
      '#weight' => -3,
      '#default_value' => $field->data['validate']['maxsize'],
      '#description' => t('field', '标签最大不超过 64 个字符。汉字、字母、数字均算做一个字符')
    );
    $form['fields']['data']['validate']['minsize'] = array(
      '#type' => 'textfield',
      '#title' => t('field', '最小长度'),
      '#weight' => -2,
      '#default_value' => $field->data['validate']['minsize']
    );
    
    $options[0] = t('field', '任意');
    
    dd_add_js('modules/field/field.admin.js');
    
    if ($opt = module_invoke_all('field_type_tags', 'setting', NULL, $field)) {
      if ($_POST['data']) {
        $data_type = $_POST['data']['validate']['type'];
      } else {
        $data_type = $field->data['validate']['type'];
      }
      $coustom_field = false;
      foreach ($opt as $key => $o) {
        $options[$key] = $o['title'];
        if ($o['fields']) {
          
          foreach ($o['fields'] as $field_key => $c) {
            unset($o['fields']['#required']);
          }
          
          // 自定义配置字段
          $form['fields']['data']['validate']['settings'][$key] = $o['fields'];
          $coustom_field = true;
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_prefix'] = 'asc';
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_legend'] = t('field', '自定义参数');
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_suffix'] = 1;
          $form['fields']['data']['validate']['settings'][$key]['#fieldset'] = true;
          
          if ($data_type == $key) {
            $display = 'block';
          } else {
            $display = 'none';
          }
          
          $form['fields']['data']['validate']['settings'][$key]['#fieldset_attributes'] = array(
            'class' => 'field_type_textfield_settings field_type_textfield_settings_'.$key,
            'style' => 'display: '.$display.';'
          );
        }
      }
      if (!$coustom_field) {
        $form['fields']['data']['validate']['settings'] = NULL;
      }
    }
    $form['fields']['data']['validate']['type'] = array(
      '#type' => 'select',
      '#title' => t('field', '输入类型'),
      '#default_value' => $field->data['validate']['type'],
      '#options' => $options,
      '#weight' => -1,
      '#description' => t('field', '此字段允许输入的值。')
    );
  }
  
  if ($field->field_id) {
    $terms = field_get_term_type();
    if (in_array($field->field_type, $terms)) {
      /**
       * 编辑字段，是否允许在不同类型间变更？如把单行文本改为多行文本
       * 不同字段数据结构、存储方式不同，变更会引发不同的问题
       * 但传统型字段（即分类）常用类型变更需求，特别是新开设站点
       * 所以允许在这几个类型间变更，但可能造成未知问题。
       * 如自由标签变更为单选，若分类下已存在数据，将难以自动转换
       * 通常在字段下已有数据时，不应该变更它
       */
      $form['fields']['field_type'] = array(
        '#type' => 'select',
        '#title' => t('field', '类型'),
        '#required' => 1,
        '#default_value' => $field->field_type,
        '#options' => field_get_type_options('___term', array('term' => 1)),
      );
      unset($form['fields']['_field_type']);
    }
  }
  
}

/**
 * 传统型分类字段类型
 */
function field_get_term_type() {
  return array('tags', 'checkbox', 'select', 'radio', 'selects');
}

/**
 * 提供一个可视化的字段添加\编辑表单界面，供模块调用
 * @param (object) $field
 *  包含字段参数的对象。若是新增，也必须传递 type、module 两个参数
 *  即：创建该字段的模块，以及自定义字段分组。分组必须由该模块定义
 *  即：通过 hook_field_call_group() 可获取分组信息，否则无法操作
 */
function field_form($field) {
  if (!$field->type || !$field->module) {
    dd_set_message(t('field', '参数不完整，无法调用表单'), 'error');
    return;
  }
  
  if (!$field->field_id && $_GET['field_field_import'] && $_SESSION['field_import']) {
    $field = (object)array_merge((array)$_SESSION['field_import'], (array)$field);
  }
  
  if (!$group = module_invoke($field->module, 'field_call_group', $field->type)) {
    dd_set_message(t('field', '字段组未定义，无法调用表单'), 'error');
    return;
  }
  
  /**
   * 添加时，必须先选择字段类型，以便于回调自定义项目
   */
  if (!$field->field_type && $_GET['field_field_type']) {
    $field->field_type = $_GET['field_field_type'];
  }
  
  if (!$field->field_type || !$field_type = field_get_call_lists($field->field_type)) {
    $form['fields']['field_type'] = array(
      '#type' => 'select',
      '#title' => t('field', '请选择字段类型'),
      '#required' => 1,
      '#default_value' => $field->field_type,
      '#options' => field_get_type_options($field->type, $group),
    );
    $form['fields']['import'] = array(
      '#type' => 'textarea',
      '#title' => t('field', '你也可以导入字段'),
      '#description' => t('field', '请将导出的代码复制到文本框，务必保证代码的完整性，不要做任何修改。可同时导入多个字段，注意：多个字段将直接保存，若遇冲突将跳过，不建议使用')
    );
    $form['fields']['type'] = array(
      '#type' => 'hidden',
      '#default_value' => $field->type,
      '#constant' => 1,
    );
    $form['fields']['module'] = array(
      '#type' => 'hidden',
      '#default_value' => $field->module,
      '#constant' => 1,
    );
    $form['settings'] = array(
      '#validate' => array('field_form_select_validate'),
      '#redirect' => $field->redirect,
    );
    $form['fields']['submit']['#type'] = 'submit';
    return $form;
  }
  
  if (!$field_type) {
    dd_set_message(t('field', '请求的字段类型不存在'), 'error');
    return;
  }
  
  $form['settings'] = array(
    '#validate' => array('field_form_validate'),
    '#description' => $group['description'],
    '#redirect' => $field->redirect,
    '#ajax_validate' => 1,
  );
  $form['fields']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('field', '名称'),
    '#weight' => -100,
    '#default_value' => $field->name,
    '#required' => 1,
  );
  $form['fields']['field_key'] = array(
    '#type' => 'textfield',
    '#title' => t('field', '索引'),
    '#weight' => -99,
    '#default_value' => $field->field_key,
    '#description' => t('field', '只能是数字、字母和下划线'),
    '#required' => 1,
  );
  
  $form['fields']['weight'] = array(
    '#default_value' => $field->weight ? $field->weight : 0,
    '#start' => 20,
    '#end' => -20,
    '#title' => t('field', '排序'),
    '#type' => 'weight'
  );
  
  $form['fields']['_field_type'] = array(
    '#title' => t('field', '类型'),
    '#value' => $field_type['title'],
  );
  if (!$field->field_id) {
    $form['fields']['_field_type']['#description'] = l(t('field', '返回重新选择'), $_GET['q'], array('query' => dd_query_string_encode($_GET, array_merge(array('q', 'field_field_type'), array_keys($_COOKIE)))));
  }
  $form['fields']['field_type'] = array(
    '#type' => 'hidden',
    '#constant' => 1,
    '#default_value' => $field->field_type,
  );
  $form['fields']['required'] = array(
  	'#type' => 'checkbox',
  	'#title' => t('field', '必需'),
  	'#default_value' => array($field->required),
  	'#options' => array(1 => t('field', '是'))
  );
  $form['fields']['access'] = array(
    '#fieldset_prefix' => 'asc',
    '#fieldset_legend' => t('field', '权限'),
    '#fieldset_suffix' => 1,
    '#description' => t('field', '默认与节点权限相同，除非有特殊权限需求， 一般不需要设置以下选项'),
  );
  $roles = user_roles_opt();
  $form['fields']['access']['view'] = array(
    '#type' => 'checkbox',
    '#title' => t('field', '浏览'),
    '#default_value' => $field->access['view'],
    '#options' => $roles
  );
  $form['fields']['access']['update'] = array(
    '#type' => 'checkbox',
    '#title' => t('field', '填写'),
    '#default_value' => $field->access['update'],
    '#options' => $roles
  );
  /*
  $form['fields']['data'] = array(
    '#fieldset_prefix' => 'asc',
    '#fieldset_legend' => t('field', '更多设置'),
    '#fieldset_suffix' => 1,
  );
  */
  $form['fields']['data']['input_description'] = array(
    '#type' => 'textfield',
    '#title' => t('field', '输入描述'),
    '#attributes' => array('size' => 50),
    '#description' => t('field', '显示在表单字段旁，辅助用户输入'),
    '#default_value' => $field->data['input_description'],
  );
  $form['fields']['data']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('field', '输出描述'),
    '#description' => t('field', '大多数时候显示在输出页面中，由模块自行设置'),
    '#default_value' => $field->data['description'],
  );
  /**
   * 触发 hook_field_call_form()
   * 模块可以在表单显示、验证、提交各环节自定义操作
   */
  module_alter_all('field_call_form', $field, $form);
  
  $form['fields']['type'] = array(
    '#type' => 'hidden',
    '#default_value' => $field->type,
    '#constant' => 1,
  );
  $form['fields']['module'] = array(
    '#type' => 'hidden',
    '#default_value' => $field->module,
    '#constant' => 1,
  );
  $form['fields']['field_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $field->field_id,
    '#constant' => 1,
  );
  
  $form['fields']['submit']['#type'] = 'submit';
  
  return $form;
}

function field_form_validate($form, $v) {
  $v = (object)$v;
  return field_save($v);
}

/**
 * 添加界面字段类型选择 或 字段导入
 */
function field_form_select_validate($form, $v) {
  if ($v['import']) {
    $data = trim($v['import']);
  }
  
  if ($get = dd_query_string_encode($_GET, array_merge(array('q', 'field_field_type'), array_keys($_COOKIE)))) {
    $get .= '&';
  }
  
  if (!$data) {
    $get .= 'field_field_type='.$v['field_type'];
    dd_goto($_GET['q'], $get);
  } else {
    $data = preg_replace('/###(.*?)###/ms', '', $data);
    if (strpos($data, '[end]') !== false) {
      if ($datas = explode('[end]', $data)) {
        $datas = array_filter($datas);
        $count = count($datas);
        foreach ($datas as $f) {
          $f = trim(str_replace('[start]', '', $f));
          $export = base64_decode($f);
          $field = unserialize($export);
          unset($field->field_id);
          if ($count == 1) {
            $_SESSION['field_import'] = $field;
            $get .= 'field_field_import=true&field_field_type='.$field->field_type;
            dd_goto($_GET['q'], $get);
          } else {
            $field->type = $v['type'];
            $field->module = $v['module'];
            field_save($field);
            if ($field->field_id) {
              dd_set_message($field->name.' 添加成功');
            } else {
              dd_set_message($field->name.' 添加失败', 'error');
            }
          }
        }
      }
    }
  }
}

/**
 * 保存一个字段
 * @param (object) $field
 *  字段对象，根据不同字段，成员各有不同，参见数据表 fields 结构
 * @return
 *  返回 array 或 false。保存不成功，返回带有错误信息，成功，则返回 false
 */
function field_save(&$field) {
  if (is_object($field)) {
    
    // 基本验证
    $function = $field->module.'_field_call_group';
    if (!function_exists($function) || !$info = $function($field->type)) {
      dd_set_message(t('field', '未定义的字段组'), 'error');
      $error['module']['#error'][] = t('field', '未定义的字段组');
    } else if (!$field->module) {
      $error['module']['#error'][] = t('field', '模块名称不能为空');
    } else if (!field_get_call_lists($field->field_type)) {
      dd_set_message(t('field', '未定义的字段类型'), 'error');
      $error['field_type']['#error'][] = t('field', '未定义的字段类型');
    } else if (!$field->field_type) {
      $error['field_type']['#error'][] = t('field', '字段类型不能为空');
    } else if (!$field->type) {
      $error['type']['#error'][] = t('field', '字段标识不能为空');
    } else if (!$field->field_key) {
      $error['field_key']['#error'][] = t('field', '索引不能为空');
    } else if (mb_strlen($field->type, 'utf-8') > 16) {
      $error['type']['#error'][] = t('field', '字段标识长度不超过 %strlen 个字符', array('%strlen' => 16));
    } else if (mb_strlen($field->field_func, 'utf-8') > 64) {
      $error['field_func']['#error'][] = t('field', '回调函数长度不超过 %strlen 个字符', array('%strlen' => 64));
    } else if ($field->name && mb_strlen($field->name, 'utf-8') > 64) {
      $error['name']['#error'][] = t('field', '字符名称长度不超过 %strlen 个字符', array('%strlen' => 64));
    } else if (preg_match('/[^0-9|a-z|_]/i', $field->type)) {
      $error['type']['#error'][] = t('field', '字段标识只能是数字、字母与下划线');
    } else if ($field->field_func && preg_match('/[^0-9|a-z|_]/i', $field->field_func)) {
      $error['field_func']['#error'][] = t('field', '回调函数只能是数字、字母与下划线');
    } else if (is_numeric($field->field_key)) {
      $error['field_key']['#error'][] = t('field', '索引不能全部是数字');
    } else if (preg_match('/[^0-9|a-z|_]/i', $field->field_key)) {
      $error['field_key']['#error'][] = t('field', '索引名称只能是数字、字母与下划线');
    } else if (($field->field_id && db_query('SELECT COUNT(*) FROM {fields} WHERE field_key = ? AND module = ?
      AND type = ? AND field_id != ?', array($field->field_key, $field->module, $field->type, $field->field_id),
      array('return' => 'column'))) || (!$field->field_id && db_query('SELECT COUNT(*) FROM {fields} WHERE field_key = ? AND module = ?
      AND type = ?', array($field->field_key, $field->module, $field->type), array('return' => 'column')))) {
      $error['field_key']['#error'][] = t('field', '%string 已经存在', array('%string' => $field->field_key));
    } else {
      if (!$field->weight) $field->weight = 0;
      if (!$field->required) {
        $field->required = 0;
      } else {
        $field->required = 1;
      }
      if (!isset($field->deleted)) $field->deleted = 1;
      if (!$field->locked) $field->locked = 0;
      if (!$field->field_func) $field->field_func = '';
      
      // 触发 hook_field_call_validate()
      if (!$error = module_alter_all('field_call_validate', $field)) {
        // 保存字段数据
        
        if ($field->field_id) {
          // 更新
          if (db_exec('UPDATE {fields} SET field_key = ?, field_type = ?, field_func = ?, type = ?, module = ?, name = ?, weight = ?, required = ?, access = ?, deleted = ?, locked = ?, data = ? WHERE field_id = ?',
            array($field->field_key, $field->field_type, $field->field_func, $field->type, $field->module, $field->name, $field->weight, $field->required, serialize($field->access), $field->deleted, $field->locked, serialize($field->data), $field->field_id), array('return' => 'return'))) {
            dd_set_message(t('field', '更新成功'));
          } else {
            dd_set_message(t('field', '更新失败'), 'error');
            return false;
          }
        } else {
          // 添加
          if ($info['sum']) {
            $count = db_query('SELECT COUNT(*) FROM {fields} WHERE module = ? AND type = ?', array($field->module, $field->type), array('return' => 'column'));
            if ($count + 1 > $info['sum']) {
              dd_set_message(t('field', '该组最多添加 %length 个字段', array('%length' => $info['sum'])), 'error');
              $error['type']['#error'][] = t('field', '该组最多添加 %length 个字段', array('%length' => $info['sum']));
              return $error;
            }
          }
          
          if (db_exec('INSERT INTO {fields} (field_key, field_type, field_func, type, module, name, weight, required, access, deleted, locked, data) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            array($field->field_key, $field->field_type, $field->field_func, $field->type, $field->module, $field->name, $field->weight, $field->required, serialize($field->access), $field->deleted, $field->locked, serialize($field->data)))) {
            $field->field_id = db_last_insert_id();
          } else {
            dd_set_message(t('field', '写入失败'), 'error');
            return false;
          }
        }
        
        /**
         * 触发 hook_field_call_save()
         */
        module_invoke_all('field_call_save', $field);
        
        field_get_cache_field(NULL, 1); // 更新缓存
        return false;
      }
    }
    
    return $error;
  }
}

/**
 * 加载字段数据
 * @param (int) $field_id
 *  字段 id
 * @param (bool) $clear
 *  默认从缓存中读取，若传递 true，则读取数据库，并调用 hook_field_call_load()
 */
function field_load($field_id, $clear = NULL) {
  static $fields;
  if (!isset($fields[$field_id])) {
    $fields[$field_id] = field_get_cache_field($field_id, $clear);
  }
  return $fields[$field_id];
}

/**
 * 导出字段配置。可按单个、单个、模块、一组导出
 * @param (int or array) $field_id
 *  单个 或一组字段 id
 * @param $module
 *  模块名称
 * @param $type
 *  字段组名字
 */
function field_export($field_id = NULL, $module = NULL, $type = NULL) {
  if ($field_id) {
    if (is_array($field_id)) {
      foreach ($field_id as $id) {
        $fields[$id] = field_load($id);
      }
    } else {
      $fields[$field_id] = field_load($field_id);
    }
  }
  
  if ($module && $type) {
    $fields = field_get_cache_field_group($module, $type);
  } else if ($module) {
    $fields = field_get_cache_field_group($module);
  }
  
  if ($fields) {
    foreach ($fields as $field) {
      module_alter_all('field_call_export', $field);
      $output .= '###'.$field->name."###\n";
      $output .= '[start]'.base64_encode(serialize($field))."[end]\n";
    }
    return dd_form_textarea(array('#value' => $output, '#name' => 'field_export', '#attributes' => array('rows' => 20, 'cols' => 80)));
  }
}

/**
 * 删除字段
 * 触发 hook_field_call_delete()
 */
function field_delete($field) {
  if ($field->deleted) {
    if (db_exec('DELETE FROM {fields} WHERE field_id = ?', array($field->field_id))) {
      module_invoke_all('field_call_delete', $field);
      dd_set_message(t('field', '删除成功'));
      field_get_cache_field(NULL, 1); // 更新缓存
      return true;
    } else {
      dd_set_message(t('field', '删除失败'), 'error');
    }
  } else {
    dd_set_message(t('field', '这个字段不允许删除'), 'error');
  }
}

/**
 * 输出字段管理界面。默认获取全部，也可按模块、按分组获取
 * 函数将占用以 field_ 开头的 _GET、_POST 参数，以便于将基本操作集中
 * 调用本函数的模块，应避免在相同页面使用上述参数
 * 默认提供删除、编辑操作，提供一个路径用做自定义界面
 * $_GET['field_op'] == 'custom' 时，将调用 {module}_field_call_custom()
 * @param (string) $module
 *  模块系统名称
 * @param (string) $group
 *  字段分组名称
 */
function field_lists($module = NULL, $type = NULL) {
  if ($_POST['field_field_id']) {
    if (isset($_POST['field_change_weight']) && is_numeric($_POST['field_change_weight'])) {
      if (db_exec('UPDATE {fields} SET weight = ? WHERE field_id = ?', array($_POST['field_change_weight'], $_POST['field_field_id']))) {
        echo 'ok';
      }
      exit;
    }
    if (isset($_POST['field_change_required']) && is_numeric($_POST['field_change_required'])) {
      if (db_exec('UPDATE {fields} SET required = ? WHERE field_id = ?', array($_POST['field_change_required'], $_POST['field_field_id']))) {
        echo 'ok';
      }
      exit;
    }
  }
  
  if ($_GET['field_field_id']) {
    if ($field = field_load($_GET['field_field_id'])) {
      switch ($_GET['field_op']) {
        case 'custom':
          /**
           * 预留路径，由定义字段类型的模块操作
           * 比如，多级分类可在此提供下级分类管理界面
           * 注意：仅回调定义当前字段类型的模块的 hook_field_call_custom()
           */
          $types = field_get_call_lists();
          $function = $types[$field->field_type]['module']. '_field_call_custom';
          if (function_exists($function)) {
            return $function($field);
          } else {
            dd_set_message(t('field', '错误的请求'));
            dd_goto(dd_get_history());
          }
        break;
        case 'update':
          if (!$field->locked) {
            return dd_get_form('field_form', $field);
          } else {
            dd_set_message(t('field', '这个字段不允许编辑'), 'error');
          }
        break;
        case 'export':
          return field_export($field->field_id);
        break;
        case 'delete':
          /**
           * 删除字段
           */
          field_delete($field);
          dd_goto(dd_get_history());
        exit;
      }
    } else {
      dd_set_message(t('field', '错误的访问'), 'error');
      return;
    }
  }
  
  if ($module && $type) {
    $fetch = pager_query('SELECT * FROM {fields} WHERE module = ? AND type = ? ORDER BY weight ASC, field_id ASC', 20, 0, NULL, array($module, $type));
  } else if ($module) {
    $fetch = pager_query('SELECT * FROM {fields} WHERE module = ? ORDER BY weight ASC, field_id ASC', 20, 0, NULL, array($module));
  } else {
    $fetch = pager_query('SELECT * FROM {fields} ORDER BY weight ASC, field_id ASC', 20);
  }
  
  if (!$fetch) return system_no_content();
  
  $types = field_get_call_lists();
  
  $header = array(
    t('field', '名称'),
    t('field', '类型'),
    t('field', '必需'),
    t('field', '权重'),
    t('field', '操作')
  );
  
  if ($get = dd_query_string_encode($_GET, array_merge(array('q', 'field_field_id'), array_keys($_COOKIE)))) {
    $get .= '&';
  }
  
  foreach ($fetch as $field) {
    $links = array();
    if (!$field->locked) {
      $links[] = l(t('field', '编辑'), $_GET['q'], array('query' => $get.'field_op=update&field_field_id='.$field->field_id.'&redirect='.rawurlencode($_SERVER['REQUEST_URI'])));
    }
    if ($field->deleted) {
      $links[] = l(t('field', '删除'), $_GET['q'], array('query' => $get.'field_op=delete&field_field_id='.$field->field_id, 'attributes' => array('class' => 'confirm')));
    }
    $links[] = l(t('field', '导出'), $_GET['q'], array('query' => $get.'field_op=export&field_field_id='.$field->field_id));
    module_alter_all('field_call_links', $field, $links, $get);
    
    $table[] = array(
      $field->name, $types[$field->field_type]['title'],
      dd_form_select(
        array(
          '#name' => 'field_list_required',
          '#value' => $field->required,
          '#attributes' => array('alt' => $field->field_id),
          '#options' => array(t('field', '否'), t('field', '是'))
        )
      ),
      dd_form_weight(
        array(
          '#name' => 'field_list_weight',
          '#value' => $field->weight,
          '#attributes' => array('alt' => $field->field_id),
          '#start' => -20,
          '#end' => 20,
        )
      ),
      dd_imp($links)
    );
  }
  
  $output = theme('table', $header, $table, array('id' => 'field_admin_list'));
  $output .= pager_view();
  return $output;
}

/**
 * @Implement of hook_field_call_export()
 */
function field_field_call_export(&$field) {
  
  if (in_array($field->field_type, field_get_term_type())) {
    if ($fetch = db_query('SELECT tid, pid, weight, name, description FROM {fields_term} WHERE field_id = ?',
    array($field->field_id), array('fetch' => 'array'))) {
      
      foreach ($fetch as $o) {
        $terms[$o['pid']][$o['tid']] = $o;
      }
      
      foreach ($terms[0] as $a) {
        $rows = $a;
        if ($sub = _field_field_call_export($a['tid'], $terms)) {
          $rows['childrens'] = $sub;
        }
        $items[] = $rows;
      }
      
      if ($items) {
        $field->children = $items;
      }
    }
  }
}

function _field_field_call_export($tid, $terms) {
  if ($terms[$tid]) {
    foreach ($terms[$tid] as $a) {
      $rows = $a;
      if ($sub = _field_field_call_export($a['tid'], $terms)) {
        $rows['childrens'] = $sub;
      }
      $items[] = $rows;
    }
  }
  return $items;
}

/**
 * @Implement of hook_field_call_links()
 * 自定义字段管理界面链接，
 */
function field_field_call_links($field, &$links = NULL, $get = NULL) {
  if (in_array($field->field_type, field_get_term_type())) {
    $links[] = l(t('field', '浏览子级'), $_GET['q'], array('query' => $get.'field_op=custom&field_custom=view&field_field_id='.$field->field_id));
    $links[] = l(t('field', '添加子级'), $_GET['q'], array('query' => $get.'field_op=custom&field_custom=add&redirect='.rawurlencode($_SERVER['REQUEST_URI']).'&field_field_id='.$field->field_id));
    $links[] = l(t('field', '批量添加'), $_GET['q'], array('query' => $get.'field_op=custom&field_custom=import&redirect='.rawurlencode($_SERVER['REQUEST_URI']).'&field_field_id='.$field->field_id));
  }
}

/**
 * @Implement of hook_field_call_custom()
 * field 只提供基本数据的操作接口及管理界面，即对 fields 表的操作
 * 有些类型可能需要提供界面和操作，故而在字段管理界面预留路径，用做自定义
 * 在字段管理界面下，当 $_GET['field_op'] == 'custom'，将回调函数
 * 以下主要为增强传统分类型字段的功能，便于通过界面管理
 * field_term_save() 等函数也可供模块直接操作上述类型的字段
 */
function field_field_call_custom($field) {
  if (in_array($field->field_type, field_get_term_type())) {
    if ($_GET['field_term_tid']) {
      $term = field_term_load($_GET['field_term_tid']);
    }
    switch ($_GET['field_custom']) {
      case 'view':
      return field_term_lists($field, $term);
      case 'import':
      return dd_get_form('field_term_import', $field, $term);
      case 'add':
      return dd_get_form('field_term_form', $field, $term);
      case 'update':
      return dd_get_form('field_term_form', $field, $term);
      case 'delete':
        if ($term && field_term_delete($term)) {
          dd_set_message(t('field', '%string 及其子级已成功删除', array('%string' => $term->name)));
        } else {
          dd_set_message(t('field', '删除失败'), 'error');
        }
        dd_goto(dd_get_history());
    }
  }
}

/**
 * 分类字段为：tags、select、radio、selects、checkbox
 * 与分类操作相关的接口：
 * 载入分类：hook_field_call_term_load(&$term)，$field 在 $term->field
 * 分类表单：hook_field_call_term_form(&$form, &$field, &$term)
 * 分类验证：hook_field_call_term_validate($field, $term)
 * 分类保存：hook_field_call_term_save($field, $term)
 * 分类删除：hook_field_call_term_delete($term)
 */

/**
 * 获取分类允许的最大层级
 * @param (array)$group
 * @param (object)$field
 */
function field_group_info_level($group, $field) {
  if ($group['children'] && $group['children'][$field->field_key] && $group['children'][$field->field_key]['level']) {
    return $group['children'][$field->field_key]['level'];
  } else {
    return $group['level'];
  }
}

/**
 * 验证层级分类层级，最多不超过 10 级
 * 检查 {tid} == $pid 的分类是否允许子分类
 */
function field_term_is_level($pid, $level) {
  if ($level == 1 && $pid) {
    return false;
  }
  
  if (!$pid) {
    return true;
  }
  
  if (!$level || $level > 10) {
    $level = 10;
  }
  
  static $lists;
  if (!isset($lists[$pid])) {
		$i = 2;
    $lists[$pid] = true;
    $_pid = $pid;
		while ($_pid = db_query('SELECT pid FROM {fields_term} WHERE tid = ? AND pid != 0', array($_pid), array('return' => 'column'))) {
			if ($level == $i) {
        $lists[$pid] = false;
        return false;
      }
      ++$i;
		}
  }
  return $lists[$pid];
}

/**
 * 按 pid 生成树形选择项
 */
function field_term_options($field, $level = NULL, $data = 0) {
  if (!$level || $level > 10) $level = 10;
  
  $key = 'field_cache_options_'.$field->field_id.'_'.$level.'_'.$data;
  
  if ($cache = cache_get($key, 'cache_field')) {
    return $cache->data;
  }
  
  $options[0] = $field->name;
  if ($fetch = db_query('SELECT pid, tid, name FROM {fields_term} WHERE field_id = ? ORDER BY pid ASC, weight ASC, tid ASC', array($field->field_id))) {
    foreach ($fetch as $o) {
      $datas[$o->pid][$o->tid] = $o;
    }
    
    foreach ($datas[0] as $o) {
      if (!$data) {
        if ($j > $level) break;
        $options[$o->tid] = '--'.$o->name;
      } else {
        $o->name = '--'.$o->name;
        $options[$o->tid] = $o;
      }
      
      if ($datas[$o->tid]) {
        _field_term_options($o->tid, $datas, $options, $data);
      }
    }
  }
  
  cache_set($key, $options, 'cache_field');
  
  return $options;
}

function _field_term_options($tid, $datas, &$options, $data, $i = '--') {
  $i .= '--';
  foreach ($datas[$tid] as $o) {
    $o->name = $i.$o->name;
    if (!$data) {
      $options[$o->tid] = $o->name;
    } else {
      $options[$o->tid] = $o;
    }
    
    if ($datas[$o->tid]) {
      _field_term_options($o->tid, $datas, $options, $data, $i);
    }
  }
}

/**
 * 分类管理界面
 */
function field_term_lists($field, $term = NULL) {
  $group = module_invoke($field->module, 'field_call_group', $field->type);
  $sub_tabs[] = l(t('field', '返回管理'), $_GET['q']);
  $get = dd_query_string_encode($_GET, array_merge(array('q', 'field_term_tid', 'field_custom', 'field_term_lists'), array_keys($_COOKIE)));
  
  $redirect = '&redirect='.rawurlencode($_SERVER['REQUEST_URI']);
  
  if ($term->tid) {
    $sub_tabs[] = l(t('field', '返回上级'), $_GET['q'], array('query' => $get.'&field_custom=view&field_term_tid='.$term->pid));
    $sub_tabs[] = l(t('field', '添加'), $_GET['q'], array('query' => $get.'&field_custom=add&field_term_pid='.$term->tid.$redirect));
  } else {
    $term->tid = 0;
    $sub_tabs[] = l(t('field', '添加'), $_GET['q'], array('query' => $get.'&field_custom=add&'.$redirect));
    $sub_tabs['level'] = l(t('field', '树形显示全部分类'), $_GET['q'], array('query' => $get.'&field_custom=view&field_term_lists=1'));
  }
  
  dd_set_title(array($term->name, $field->name, $group['title']));
  
  if (!$_GET['field_term_lists']) {
    $fetch = pager_query('SELECT * FROM {fields_term} WHERE field_id = ? AND pid = ?', 20, 0, NULL, array($field->field_id, $term->tid));
  } else if ($options = field_term_options($field, field_group_info_level($group, $field), 1)) {
    array_shift($options);
    $fetch = (object) $options;
    $sub_tabs['level'] = l(t('field', '分页显示分类'), $_GET['q'], array('query' => $get.'&field_custom=view'));
  }
  if ($fetch) {
    $header = array(
      t('field', '名称'), t('field', '操作')
    );
    
    foreach ($fetch as $o) {
      $links = array(
        l(t('field', '编辑'), $_GET['q'], array('query' => $get.'&field_custom=update&field_term_tid='.$o->tid.$redirect)),
        l(t('field', '删除'), $_GET['q'], array('query' => $get.'&field_custom=delete&field_term_tid='.$o->tid, 'attributes' => array('class' => 'confirm'))),
      );
      if (field_term_is_level($o->tid, field_group_info_level($group, $field))) {
        if (!$_GET['field_term_lists']) {
          $links[] = l(t('field', '浏览子级'), $_GET['q'], array('query' => $get.'&field_custom=view&field_term_tid='.$o->tid));
        }
        $links[] = l(t('field', '添加子级'), $_GET['q'], array('query' => $get.'&field_custom=add&field_term_pid='.$o->tid.$redirect));
        $links[] = l(t('field', '批量添加'), $_GET['q'], array('query' => $get.'&field_custom=import&field_term_pid='.$o->tid.$redirect));
      }
      
      $table[] = array($o->name, dd_imp($links));
    }
    $output = theme('table', $header, $table);
    $output .= pager_view();
  } else {
    $output = system_no_content();
  }
  
  dd_set_sub_tabs($sub_tabs);
  return $output;
}

/**
 * 载入分类
 */
function field_term_load($tid) {
	static $terms;
	if (!isset($term[$tid])) {
		if ($term = db_query('SELECT * FROM {fields_term} WHERE tid = ?', array($tid), array('return' => 'one'))) {
		  $field = field_load($term->field_id);
      $term->field = $field;
		  module_alter_all('field_call_term_load', $field, $term);
		}
		$terms[$tid] = $term;
	}
	return $terms[$tid];
}

/**
 * 验证分类浏览权限，权限继承自field
 */
function field_term_access($term) {
  return field_access('view', $term->field);
}

/**
 * 浏览分类，实现 hook_field_term_view()
 * 浏览页面将回调定义该分类的模块
 * 由该模块输出内容
 */
/*
function field_field_term_view($term) {
  $output = '内容';
  return $output;
}
*/

/**
 * 删除分类，同时将删除所有子分类，及 field_node 表中相关数据
 */
function field_term_delete($term) {
  if (is_numeric($term)) {
    $term = field_term_load($term);
  } else if (is_object($term)) {
    
    if (!$term->field_id) {
      $term = field_term_load($term->tid);
    }
    
  } else {
    return false;
  }
  
  if ($fetch = db_query('SELECT tid FROM {fields_term} WHERE field_id = ? AND pid = ?',
    array($term->field_id, $term->tid))) {
    foreach ($fetch as $o) {
      $sub = field_term_load($o->tid);
      if (db_exec('DELETE FROM {fields_term} WHERE tid = ?', array($o->tid))) {
        module_invoke_all('field_call_term_delete', $sub);
      }
    }
  }
  
  if (db_exec('DELETE FROM {fields_term} WHERE tid = ?', array($term->tid))) {
    module_invoke_all('field_call_term_delete', $term);
    cache_del('*', 'field_cache_options_', 'cache_field');
    field_get_cache_field(NULL, 1);
    field_set_cache_term($term->field->module, $term->field->type);
    return true;
  }
}

/**
 * 批量添加
 */
function field_term_import($field = NULL, $term = NULL) {
  if (!$field && $term->field_id) {
    $field = field_load($term->field_id);
  }
  if (!$field->field_id) {
    dd_set_message(t('field', '错误的请求'), 'error');
    return false;
  }
  
  // 读取字段组信息
  if (!$group = module_invoke($field->module, 'field_call_group', $field->type)) {
    dd_set_message(t('field', '错误的请求'), 'error');
    return false;
  }
  
  if ($_GET['field_term_pid'] && !$term->pid) {
    $term->pid = $_GET['field_term_pid'];
  }
  
  $sub_tabs[] = l(t('field', '返回管理'), $_GET['q']);
  if ($term->pid) {
    if ($get = dd_query_string_encode($_GET, array_merge(array('q', 'field_custom', 'field_term_tid', 'field_term_pid', 'redirect'), array_keys($_COOKIE)))) {
      $get .= '&field_custom=view&';
    }
    $get .= 'field_term_tid='.$term->pid;
    $sub_tabs[] = l(t('field', '返回上级'), $_GET['q'], array('query' => $get));
  }
  
  dd_set_sub_tabs($sub_tabs);
  
  $form['settings'] = array(
    '#validate' => array('field_term_import_validate'),
    '#ajax_validate' => 1,
  );
  
  $form['fields']['pid'] = array(
    '#title' => t('field', '上级'),
    '#type' => 'select',
    '#default_value' => $term->pid,
    '#options' => field_term_options($field, field_group_info_level($group, $field))
  );
  
  $form['fields']['field_id'] = array(
    '#type' => 'hidden',
    '#default_value' => $field->field_id,
    '#constant' => 1
  );
  
  $form['fields']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('field', '文本'),
    '#description' => t('field', '每行一条记录，格式为：名称|排序值|描述，名称必须，排序值和描述可选。如：电脑|10|电脑的描述'),
  );
  
  $form['fields']['submit']['#type'] = 'submit';
  return $form;
}


function field_term_import_validate($form, $v) {
  if ($field = field_load($v['field_id'])) {
    if ($array = dd_line_to_array($v['body'], true)) {
      foreach ($array as $term) {
        $term = trim($term);
        if (strpos($term, '|') !== false) {
          $t = explode('|', $term);
          $data[] = array('name' => $t[0], 'weight' => $t[1], 'description' => $t[2]);
        } else {
          $data[] = $term;
        }
      }
      field_term_batch_save($field, $v['pid'], $data);
      field_get_cache_field(NULL, 1);
      field_set_cache_term();
    }
  } else {
    dd_set_message(t('field', '不正确的字段'));
    return true;
  }
}

/**
 * 分类表单
 */
function field_term_form($field = NULL, $term = NULL) {
  if (!$field && $term->field_id) {
    $field = field_load($term->field_id);
  }
	if (!$field->field_id) {
		dd_set_message(t('field', '错误的请求'), 'error');
		return false;
	}
  
	// 读取字段组信息
	if (!$group = module_invoke($field->module, 'field_call_group', $field->type)) {
    dd_set_message(t('field', '错误的请求'), 'error');
    return false;
  }
  
  if ($_GET['field_term_pid'] && !$term->pid) {
    $term->pid = $_GET['field_term_pid'];
  }
  
  $sub_tabs[] = l(t('field', '返回管理'), $_GET['q']);
  if ($term->pid) {
    if ($get = dd_query_string_encode($_GET, array_merge(array('q', 'field_custom', 'field_term_tid', 'field_term_pid', 'redirect'), array_keys($_COOKIE)))) {
      $get .= '&field_custom=view&';
    }
    $get .= 'field_term_tid='.$term->pid;
    $sub_tabs[] = l(t('field', '返回上级'), $_GET['q'], array('query' => $get));
  }
  dd_set_sub_tabs($sub_tabs);
  
  $form['settings'] = array(
    '#validate' => array('field_term_form_validate'),
    '#ajax_validate' => 1,
  );
  
  $form['fields']['pid'] = array(
    '#title' => t('field', '上级'),
    '#type' => 'select',
    '#weight' => -100,
    '#default_value' => $term->pid,
    '#options' => field_term_options($field, field_group_info_level($group, $field))
  );
  
  $form['fields']['field_id'] = array(
  	'#type' => 'hidden',
  	'#default_value' => $field->field_id,
  	'#constant' => 1
  );
  
  $form['fields']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('field', '名称'),
    '#weight' => -90,
    '#default_value' => $term->name,
    '#required' => 1,
  );
  $form['fields']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('field', '描述'),
    '#default_value' => $term->description,
  );
  $form['fields']['tid'] = array(
    '#type' => 'hidden',
    '#default_value' => $term->tid,
    '#constant' => 1,
  );
  $form['fields']['weight'] = array(
    '#default_value' => $term->weight ? $term->weight : 0,
    '#start' => 20,
    '#end' => -20,
    '#weight' => -80,
    '#title' => t('field', '排序'),
    '#type' => 'weight'
  );
  
  module_alter_all('field_call_term_form', $form, $field, $term);
  
  $form['fields']['submit']['#type'] = 'submit';
  return $form;
}

/**
 * 分类验证、保存
 */
function field_term_form_validate($form, $v) {
  if ($field = field_load($v['field_id'])) {
    $term = (object)$v;
    /**
     * 1、触发自定义验证 hook_field_call_term_validate()
     * 2、调用 field_term_save() 保存数据
     * 3、触发自定义保存 hook_field_call_term_save()
     */
    if ($term = field_term_save($field, $term)) {
      field_get_cache_field(NULL, 1);
      field_set_cache_term();
      dd_set_message(t('field', '操作成功'));
    } else {
      return true;
    }
    
  } else {
    dd_set_message(t('field', '不正确的字段'));
    return true;
  }
}

/**
 * 保存分类数据，若存在则更新
 */
function field_term_save(&$field, $term, $batch = 0) {
  if (!isset($field->pid)) $field->pid = 0;

  if ($error = module_invoke_all('field_call_term_validate', $field, $term)) {
    dd_set_message(implode('<br />', dd_array2_to('value', $error)), 'error');
    return false;
  }
  if (mb_strlen($term->name, 'utf-8') > 64) {
		dd_set_message(t('field', '名称长度不超过 75 个字符'), 'error');
		return false;
  }
	if (!$group = module_invoke($field->module, 'field_call_group', $field->type)) {
    dd_set_message(t('field', '字段组不存在'), 'error');
    return false;
  }
  
	if (!field_term_is_level($term->pid, field_group_info_level($group, $field))) {
		dd_set_message(t('field', '层级深度已超过限制，添加失败'), 'error');
		return false;
	}
	
  if (!$term->field_id) $term->field_id = $field->field_id;
  
  if ($term->tid) {
    if (!db_query('SELECT tid FROM {fields_term} WHERE field_id = ? AND name = ? AND tid != ? AND pid = ?',
    array($field->field_id, $term->name, $term->tid, $term->pid), array('return' => 'column'))) {
      $newterm = field_term_update($term);
    } else {
      dd_set_message(t('field', '%string 已经存在', array('%string' => $term->name)), 'error');
      return false;
    }
  } else if ($batch) {
    static $data;
    if (!isset($data[$term->field_id])) {
      $data[$term->field_id] = array($term->pid => array());
      if ($fetch = db_query('SELECT tid, pid, name FROM {fields_term} WHERE field_id = ?', array($term->field_id))) {
        foreach ($fetch as $o) {
          $data[$term->field_id][$o->pid][$o->tid] = $o->name;
        }
      }
    }
    if ($data[$term->field_id][$term->pid] && $tid = array_search($term->name, $data[$term->field_id][$term->pid])) {
      $term->tid = $tid;
      $newterm = field_term_update($term);
    } else {
      $newterm = field_term_insert($term);
    }
  } else if (!db_query('SELECT tid FROM {fields_term} WHERE field_id = ? AND name = ? AND pid = ?',
  array($field->field_id, $term->name, $term->pid), array('return' => 'column'))) {
    $newterm = field_term_insert($term);
  } else {
    dd_set_message(t('field', '%string 已经存在', array('%string' => $term->name)), 'error');
    return false;
  }
  
  if ($newterm->tid) {
    module_invoke_all('field_call_term_save', $field, $newterm);
    cache_del('*', 'field_cache_options_', 'cache_field');
    return $newterm;
  }
}

/**
 * 写入分类数据
 */
function field_term_insert($term) {
  if (!$term->weight) $term->weight = 0;
  if (!$term->pid) $term->pid = 0;
  if (!$term->description) $term->description = '';
  $term->_op = 'insert';
  if (db_exec('INSERT INTO {fields_term} (pid, field_id, weight, name, description) VALUES (?, ?, ?, ?, ?)', array($term->pid, $term->field_id, $term->weight, $term->name, $term->description))) {
    if ($term->tid = db_last_insert_id()) return $term;
  }
}

/**
 * 更新分类数据
 */
function field_term_update($term) {
  if (!$term->weight) $term->weight = 0;
  if (!$term->pid) $term->pid = 0;
  if (!$term->description) $term->description = '';
  $term->_op = 'update';
  if (db_exec('UPDATE {fields_term} SET pid = ?, weight = ?, name = ?, description = ? WHERE tid = ?',
  array($term->pid, $term->weight, $term->name, $term->description, $term->tid), array('return' => 1))) {
    return $term;
  }
}

/**
 * 批量写入传统型分类字段(即 field_get_term_type())
 */
function field_term_batch_save(&$field, $pid = 0, $data = array(), $message = 1) {
  if (!$data) return false;
  foreach ($data as $term) {
    if (is_array($term)) {
      if ($term['name']) {
        $term['pid'] = $pid;
        if ($t = field_term_save($field, (object)$term, 1)) {
          if ($message) dd_set_message(t('field', '%string 添加成功', array('%string' => $t->name)));
          if ($term['childrens'] && is_array($term['childrens'])) {
            field_term_batch_save($field, $t->tid, $term['childrens'], $message);
          }
        }
      }
    } else if ($t = field_term_save($field, (object)array('pid' => $pid, 'name' => $term), 1)) {
      if ($message) dd_set_message(t('field', '%string 添加成功', array('%string' => $term)));
    }
  }
  return true;
}

/**
 * @Implement of hook_field_call_validate()
 *  添加\更新字段通过基本验证后回调
 * @return
 *  返回 array 或 false。array 包含一组错误信息，阻止操作。false 则表示通过验证
 */

function field_field_call_validate(&$field) {
  if ($field->field_type == 'file') {
    if (strpos($field->data['filetype'], '|') !== false) {
      $field->data['filetype'] = explode('|', $field->data['filetype']);
    } else if ($field->data['filetype']) {
      $field->data['filetype'] = array($field->data['filetype']);
    }
    if ($field->data['filesize'] && !is_numeric($field->data['filesize'])) {
      dd_set_message(t('field', '文件大小只能是数字'), 'error');
      return true;
    }
  } else if ($field->data['validate']['type']) {
    // 回调自定义配置
    if ($field->data['validate']['settings'][$field->data['validate']['type']]) {
      $field->data['validate']['settings'] = $field->data['validate']['settings'][$field->data['validate']['type']];
    } else {
      unset($field->data['validate']['settings']);
    }
    return module_invoke_all('field_type_'.$field->field_type, 'validate', $field->data['validate']['type'], $field);
  }
}

/**
 * @Implement of hook_field_call_load()
 *  载入字段
 */
/*
function field_field_call_load(&$field) {
}
*/

/**
 * @Implement of hook_field_call_delete()
 *  删除字段
 */
/*
function field_field_call_delete($field) {
}
*/

/**
 * @Implement of hook_field_call_save()
 *  字段添加\更新成功后回调
 */
function field_field_call_save($field) {
  /** 
   * 字段类型的创建者（模块）可为字段定义多个参数，在字段基本信息存储成功后，自行写入
   * 如本模块的传统型字段即定义了 $field->children，它包含一个分类树。格式如：
      $field->children = array(
        array(
          'name' => '中国',
          'weight' => 10,
          'childrens' => array(
            array(
              'name' => '四川',
              'childrens' => array(
                array(
                  'name' => '成都'
                ),
              )
            ),
          )
        )
      );
   * 或 $field->children = array('中国', '美国', '法国');
   * 这个分类树，最多不超过 10 级，在定义字段组时，可以设置层级限制
   * 字段基本信息添加成功后，若有此值，则写入 field_term 表中
   */
  if ($field->children && in_array($field->field_type, field_get_term_type())) {
   field_term_batch_save($field, 0, $field->children);
  }
  if ($field->data['validate']['type']) {
      // 回调自定义配置
    module_invoke_all('field_type_'.$field->field_type, 'save', $field->data['validate']['type'], $field);
  }
}

/**
 * @示例 hook_field_call_group()
 *  创建模块字段组参数。字段创建是开放的，模块可以允许使用者自行创建字段
 *  hook_field_call_group() 用来设置创建字段的规范或限制
 *  每个模块创建的字段应该有不同的标识，对应于 fields 表中的 type 字段，而 module 字段则是模块名称
 *  type 相当于组，一个组中可以有多个字段。比如：
 *  模块可以设置一个 comment_field 组，在这个组下创建多个评论字段，再创建一个 user_field 组，用以创建用户字段
 *  type 只能以英文、数字和下划线命名，且在相同模块中不能重复
 * @return
 *  返回以 type 为键名的数组
 */

/**
function field_field_call_group($type = NULL) {
  $groups = array(
    'comment_field' => array(
    	'title' => '评论字段', // 组名称。如资讯分类、评论字段等
      'sum' => 0, // 该组下允许添加的字段数量，0 则为不限制
      'term' => 1, // 只允许添加传统型分类，即 标签、下拉框、单选、复选
      'type' => array('tags'), // 允许的类型，优先级高于 term
    	'level' => 0, // 分类层级级数，0 则为不限制(实际最多 10 级)。标签、单\多行文本、文件只有 1 层
      'fieldset' => false,
      'description' => '描述', // 描述
    )
  );
  return $type ? $groups[$type] : $groups;
}
 */

/**
 * 写入分类缓存，按字段分组信息
 */
function field_set_cache_term($module = NULL, $type = NULL) {
  if ($module && $type) {
    $fetch = db_query('SELECT t.*, f.module, f.type, f.field_type, f.field_key FROM {fields_term} 
    t INNER JOIN {fields} f ON t.field_id = f.field_id WHERE f.type = ? AND f.module = ? AND 
    f.field_type != ? ORDER BY t.weight ASC, t.tid ASC', array($type, $module, 'tags'));
  } else {
    $fetch = db_query('SELECT t.*, f.module, f.type, f.field_type, f.field_key FROM {fields_term} 
    t INNER JOIN {fields} f ON t.field_id = f.field_id WHERE f.field_type != ? 
    ORDER BY t.weight ASC, t.tid ASC', array('tags'));
  }
  
  if ($fetch) {
    global $conf;
    foreach ($fetch as $o) {
      if ($o->pid && ($o->field_type == 'select' || $o->field_type == 'selects')) {
        $conf['field_term_children'][$o->field_id] = 1;
        $children = 1;
        continue;
      }
      $key = $o->module.'_'.$o->type;
      $p[$key][$o->field_id][$o->tid] = $o;
    }
    foreach ($p as $k => $data) {
      cache_set('field_term_'.$k, $data);
    }
    
    // 删除每个字段单独的缓存
    cache_del('*', 'field_term_key_cache_');
    
    if ($children) {
      var_set('field_term_children', $conf['field_term_children']);
    }
    return $p;
  }
}

/**
 * 按字段组获取分类缓存，标签除外
 */
function field_get_cache_term($module, $type) {
  static $term;
  $key = 'field_term_'.$module.'_'.$type;
  if (!isset($term[$key])) {
    $term[$key] = array();
    if ($cache = cache_get($key)) {
      $term[$key] = $cache->data;
    } else if ($data = field_set_cache_term($module, $type)) {
      $term[$key] = $data;
    }
  }
  return $term[$key];
}

/**
 * 获取指定 key 的分类缓存数据
 */
function field_get_cache_term_key($module, $type, $field_key) {
  static $term;
  $key = 'field_term_key_cache_'.$module.'_'.$type . '_' . $field_key;
  if (!isset($term[$key])) {
    $term[$key] = array();
    if ($cache = cache_get($key)) {
      $term[$key] = $cache->data;
    } else if ($data = field_get_cache_term($module, $type)) {
      $term[$key] = array();
      if ($field = field_get_cache_field_key($module, $type, $field_key)) {
        $term[$key] = $data[$field->field_id];
      }
      cache_set($key, $term[$key]);
    }
  }
  return $term[$key];
}


/**
 * 获取（清除）所有字段缓存数据
 */
function field_get_cache_field($field_id = NULL, $clear = 0) {
  if ($clear || ($data = var_get('field_data', false)) === false) {
    $data = array();
    if ($fetch = db_query('SELECT * FROM {fields} ORDER BY weight ASC, field_id ASC')) {
      $lists = field_get_call_lists();
      foreach ($fetch as $o) {
        $group = module_invoke($o->module, 'field_call_group', $o->type);
        
        $field_count[$o->module.$o->type] = 1;
        
        if (!$group['not_cache']) {
          if ($o->access) $o->access = unserialize($o->access);
          if ($o->data) $o->data = unserialize($o->data);
          $o->field_module = $lists[$o->field_type]['module'];
          module_alter_all('field_call_load', $o);
          $data[$o->field_id] = $o;
        } else {
          $data[$o->field_id]->not_cache = true;
        }
      }
    }
    var_set('field_data', $data);
    var_set('field_count', $field_count);
  }
  
  if ($field_id && $data[$field_id] && $data[$field_id]->not_cache) {
    if ($o = db_query('SELECT * FROM {fields} WHERE field_id = ?', array($field_id), array('return' => 'one'))) {
      $o->not_cache = true;
      if ($o->access) $o->access = unserialize($o->access);
      if ($o->data) $o->data = unserialize($o->data);
      $o->field_module = $data[$field_id]->field_module;
      module_alter_all('field_call_load', $o);
      $data[$o->field_id] = $o;
    }
  }
  
  return $field_id ? $data[$field_id] : $data;
}

/**
 * 直接从数据库读取字段
 * @param (string) $module
 *  模块名称
 * @param (string) $type
 *  类型标识
 */
function field_get_data_field($module, $type) {
  static $datas;
  if (!isset($datas[$module][$type])) {
    $datas[$module][$type] = array();
    if ($fetch = db_query('SELECT * FROM {fields} WHERE module = ? AND type = ? ORDER BY weight ASC, field_id ASC',
    array($module, $type))) {
      $lists = field_get_call_lists();
      foreach ($fetch as $o) {
        if ($o->access) $o->access = unserialize($o->access);
        if ($o->data) $o->data = unserialize($o->data);
        $o->field_module = $lists[$o->field_type]['module'];
        module_alter_all('field_call_load', $o);
        $datas[$module][$type][$o->field_id] = $o;
      }
    }
  }
  return $datas[$module][$type];
}

/**
 * 按模块和类型获取字段缓存数据
 * @param (string) $module
 *  fields 表中 module 字段
 * @param (string) $type
 *  fields 表中 type 字段
 * @param (bool) $clear
 *  true 则清空数据，重新生成缓存
 */
function field_get_cache_field_group($module, $type = NULL, $clear = 0) {
  $group = module_invoke($module, 'field_call_group', $type);
  if (!$group['not_cache']) {
    if ($fields = field_get_cache_field(NULL, $clear)) {
      foreach ($fields as $field) {
        $data[$field->module][$field->type][$field->field_id] = $field;
      }
    }
  } else if ($fields = field_get_data_field($module, $type)) {
    foreach ($fields as $field) {
      $data[$field->module][$field->type][$field->field_id] = $field;
    }
  }
  
  if ($data && $data[$module]) {
    if ($type) {
      return $data[$module][$type];
    } else {
      return $data[$module];
    }
  }
}

/**
 * 按索引获取字段
 */
function field_get_cache_field_key($module, $type, $field_key) {
  if ($fields = field_get_cache_field_group($module, $type)) {
    foreach ($fields as $field) {
      if ($field_key == $field->field_key) {
        return $field;
      }
    }
  }
}

/**
 * 按 id 获取字段
 */
function field_get_cache_field_id($module, $type, $field_id) {
  if ($fields = field_get_cache_field_group($module, $type)) {
    return $fields[$field_id];
  }
}

/**
 * 以下相关函数是字段在节点中的应用接口
 * 节点可以是任何对象，通过字段组名让字段与其关联，调用相应接口进行操作
 * 如用户提交、更新、删除节点，同时也将操作关联的字段，以 field_node_ 为前缀
 * 接口：
 * 获取字段组表单：hook_field_node_form()
 * 验证用户输入：hook_field_node_validate()
 * 保存：hook_field_node_save()
 * 删除：hook_field_node_delete()
 * 浏览：hook_field_node_view() - 仅回调定义字段类型的模块
 * 加载：hook_field_node_load() - 仅回调定义字段类型的模块
 */

/**
 * 按类型获取节点下所有字段数据
 * @param int $nid
 *  节点 id
 * @param string $type
 *  term：分类，textfield：单行文本，textarea：多行文本，file：上传字段
 * @param bool $clear
 *  是否直接从数据库查询
 *
 * 本函数获取的 nid 数据，包括所有对应的字段，请不要直接通过本函数来获取节点对应的字段数据
 */
function field_get_node_data($nid, $type = 'term', $clear = NULL) {
  static $data;
  
  if ($clear) {
    $data[$nid] = NULL;
  }
  
  if (!isset($data[$nid])) $data[$nid] = array();
  if (!isset($data[$nid][$type])) {
    switch ($type) {
      case 'term':
        $data[$nid][$type] = db_query('SELECT t.field_id, t.pid, t.name, t.tid, t.weight FROM {fields_term_node} n INNER JOIN {fields_term} t ON n.tid = t.tid WHERE n.nid = ?', array($nid));
      break;
      case 'file':
        // ext_id：字段id，ext_id2：节点id
        $data[$nid][$type] = db_query('SELECT fid, ext_id AS field_id, filepath, filename, filesize, filemime, timestamp, filebody FROM {files} WHERE ext_id2 = ? AND ext_type = ?', array($nid, 'field_file'));
      break;
      case 'textfield':
        $data[$nid][$type] = db_query('SELECT text, field_id FROM {fields_small} WHERE nid = ?', array($nid));
      break;
      case 'textarea':
        $data[$nid][$type] = db_query('SELECT text, field_id FROM {fields_long} WHERE nid = ?', array($nid));
    }
  }
  return $data[$nid][$type];
}

/**
 * @Implement of hook_file_delete()
 */
function field_file_delete($file) {
  if ($file->ext_type == 'field_file') {
    if ($o = db_query('SELECT module, type FROM {fields} WHERE field_id = ?',
      array($file->ext_id), array('return' => 'one'))) {
      cache_del('cid', $o->module.$o->type.$file->ext_id2, 'cache_field');
    }
  }
}

/**
 * 加载节点下的字段数据
 * @param (string) $module
 *  创建字段的模块，即 fields.module
 * @param (string) $type
 *  自定义分组标识，即 fields.type
 * @param (object) $node
 *  节点对象
 * @param (object) $ac
 *  指定用户对象，默认以当前用户权限判断
 * @return (void) 字段数据赋于 $node->fields
 */
function field_get_node_load($module, $type, & $node, $ac = NULL) {
  global $conf;
  
  if (!$conf['field_count'][$module.$type]) return;

  if ($cache = cache_get($module.$type.$node->nid, 'cache_field')) {
    if (!empty($node->fields) && is_array($node->fields) && is_array($cache->data)) {
      $node->fields += $cache->data;
    } else {
      $node->fields = $cache->data;
    }
    return;
  }
  
  if (!$datas = field_get_cache_field_group($module, $type)) return;
  // 分组下可能有 1 个或多个字段
  $term_type = field_get_term_type();
  foreach ($datas as $data) {
    if (!field_access('view', $data, $node, $ac)) {
      // 至少有浏览权限，才能加载数据
      continue;
    }
    /**
     * (object)$data 字段配置对象，见 fields 表结构说明
     */
    if (!$data->field_func) {
      // 没有自定义处理函数的字段
      if (in_array($data->field_type, $term_type)) {
        // 分类类型
        if ($fetch = field_get_node_data($node->nid, 'term')) {
          foreach ($fetch as $o) {
            if ($o->field_id == $data->field_id) {
              
              switch ($data->field_type) { // 应用于表单
                case 'select': case 'radio': // 单选
                  $node->fields[$data->field_key] = $o;
                break;
                case 'checkbox': case 'selects': case 'tags':// 多选
            	    $node->fields[$data->field_key][$o->tid] = $o;
              }
            }
          }
        }
      } else if ($data->field_type == 'textfield' || $data->field_type == 'textarea') { 
        // 单行文本 和 多行文本
        if ($fetch = field_get_node_data($node->nid, $data->field_type)) {
          foreach ($fetch as $o) {
            if ($o->field_id == $data->field_id) {
              $node->fields[$data->field_key] = $o;
              continue;
            }
          }
        }
      } else if ($data->field_type == 'file') { // 上传字段
        if ($fetch = field_get_node_data($node->nid, 'file')) {
          foreach ($fetch as $o) {
            if ($o->field_id == $data->field_id) {
              $node->fields[$data->field_key][$o->fid] = $o;
            }
          }
        }
      } else {
        /**
         * 其它模块定义的类型，回调 模块名_字段类型_call_load 函数，传递字段配置对象，引用传递节点对象
         * 回调函数应该加载字段数据到 $node->fields
         */
        $function = $data->field_module.'_'.$data->field_type.'_field_node_load';
        if (function_exists($function)) $function($data, $node);
      }
    } else {
      /**
       * 自定义处理函数即 fields 数据表中 field_func 字段
       * 传递操作参数 load，传递字段配置对象，引用传递节点对象
       * 操作参数：
       *  load：节点加载
       *  form：节点表单
       *  insert：写入节点
       *  delete：删除节点
       *  update：更新节点
       */
      $data->field_func('load', $data, $node);
    }
  }
  
  cache_set($module.$type.$node->nid, $node->fields, 'cache_field');
}

/**
 * 分类表单选择项
 */
function field_get_term_options($terms = array(), $required = 0) {
  $options = array();
  if (!$required) $options = array("" => t('field', '不限'));
  if ($terms) {
    foreach ($terms as $term) {
      $options[$term->tid] = $term->name;
    }
  }
  return $options;
}

/**
 * 表单分类树
 */
function field_get_term_childrens($tid) {
  if ($o = db_query('SELECT pid, tid FROM {fields_term} WHERE tid = ?', array($tid), array('return' => 'one'))) {
    if ($o->pid) {
      if ($fetch = db_query('SELECT pid, tid, name FROM {fields_term} WHERE pid = ?', array($o->pid))) {
        $options = array();
        foreach ($fetch as $term) {
          $options[$term->tid] = $term->name;
        }
        $childrens[] = array('option' => $options, 'value' => $tid);
        if ($parent = field_get_term_childrens($o->pid)) {
          $childrens = array_merge($childrens, $parent);
        }
      }
    } else {
      $childrens[] = $o->tid;
    }
  }
  return $childrens;
}

/**
 * 节点回调字段表单
 */
function field_get_node_form($module, $type, $node = NULL, &$form = NULL, $fieldset = NULL, $ac = NULL) {
  if (!$group = module_invoke($module, 'field_call_group', $type)) {
    dd_set_message(t('field', '未定义的字段组'), 'error');
    return;
  }
  
  if (!$datas = field_get_cache_field_group($module, $type)) return;
  
  if ($fieldset) {
    $form['fields']['fields'] = array(
      '#weight' => -3,
      '#fieldset_prefix' => 'asc',
      '#fieldset_legend' => t('field', '字段'),
      '#fieldset_suffix' => 1,
      '#fieldset' => true
    );
    if (is_array($fieldset)) {
      $form['fields']['fields'] = array_merge($form['fields']['fields'], $fieldset);
    }
  } else {
    $form['fields']['fields']['#weight'] = -3;
  }
  
  dd_add_js('modules/field/field.js');
  dd_add_css('modules/field/field.css');
  
  global $conf;
  foreach ($datas as $field_id => $data) {
    if (!field_access('update', $data, $node, $ac)) {
      continue;
    }
    if (!$data->field_func) {
      // 没有自定义处理函数的字段
      if ($data->field_module == 'field') {
        $options = field_get_cache_term($module, $type);
        
        $required = $data->required ? true : false;
        $field_value = NULL;
        switch ($data->field_type) {
          case 'radio':
            $form['fields']['fields'][$data->field_key] = array(
              '#title' => $data->name,
              '#type' => $data->field_type,
              '#default_value' => $node->fields[$data->field_key] ? $node->fields[$data->field_key]->tid : '',
              '#required' => $required,
              '#options' => field_get_term_options($options[$field_id], $required),
              '#description' => $data->data['input_description']
            );
          break;
          case 'checkbox':
            if ($node->fields[$data->field_key]) {
              foreach ($node->fields[$data->field_key] as $de) {
                $field_value[$de->tid] = $de->tid;
              }
            }
            $form['fields']['fields'][$data->field_key] = array(
              '#title' => $data->name,
              '#type' => $data->field_type,
              '#default_value' => $field_value,
              '#required' => $required,
              '#options' => field_get_term_options($options[$field_id], 1),
              '#description' => $data->data['input_description']
            );
          break;
          case 'select':
            if ($conf['field_term_children'][$field_id]) {
            	dd_add_js(array('fields' => array(
                $data->field_key => array(
	                'url' => url('ajax', array('query' => 'fid='.$field_id.'&op=select&module=field')),
            		)
            	)), 'setting');
              $form['fields']['fields']['field_root_'.$data->field_key] = array(
                '#title' => $data->name,
                '#type' => 'select',
                '#required' => $required,
                '#attributes' => array(
                  'class' => 'field_option_children field_option_children_'.$data->field_key,
                  'alt' => $data->field_key
                ),
                '#options' => field_get_term_options($options[$field_id]),
                '#description' => $data->data['input_description']
              );
              $default_value = NULL;
              if ($_POST['fields'][$data->field_key]) {
                $default_value = $_POST['fields'][$data->field_key];
              } else if ($node->fields[$data->field_key]) {
                $default_value = $node->fields[$data->field_key]->tid;
              }
              if ($default_value && $terms = field_get_term_childrens($default_value)) {
                static $ajaxId;
                $ajaxId = 0;
                $terms = array_reverse($terms);
                $form['fields']['fields']['field_root_'.$data->field_key]['#prefix'] = '<div class="form_item form_item_select" id="form_field_root_'.$data->field_key.'">';
                $form['fields']['fields']['field_root_'.$data->field_key]['#default_value'] = array_shift($terms);
                $form['fields']['fields']['field_root_'.$data->field_key]['#description'] = '';
                foreach ($terms as $children) {
                  ++$ajaxId;
                  $form['fields']['fields']['_field_root_'.$data->field_key.$ajaxId] = array(
                    '#type' => 'select',
                    '#attributes' => array(
                      'class' => 'field_option_children',
                      'alt' => $data->field_key
                    ),
                    '#suffix' => '',
                    '#default_value' => $children['value'],
                    '#options' => $children['option'],
                  );
                }
                $form['fields']['fields']['_field_root_'.$data->field_key.$ajaxId]['#suffix'] = '</div>';
                $form['fields']['fields']['_field_root_'.$data->field_key.$ajaxId]['#description'] = $data->data['input_description'];
              }
              $form['fields']['fields'][$data->field_key] = array(
                '#type' => 'hidden',
                '#default_value' => $default_value,
                '#required' => $required,
                '#attributes' => array(
                  'class' => 'field_select_value field_select_value_'.$data->field_key,
                  'alt' => $data->field_key
                )
              );
            } else {
              $form['fields']['fields'][$data->field_key] = array(
                '#title' => $data->name,
                '#type' => 'select',
                '#default_value' => $node->fields[$data->field_key] ? $node->fields[$data->field_key]->tid : '',
                '#required' => $required,
                '#options' => field_get_term_options($options[$field_id], $required),
                '#description' => $data->data['input_description']
              );
            }
          break;
          case 'selects':
            if ($conf['field_term_children'][$data->field_id]) {
            	dd_add_js(array('fields' => array(
                $data->field_key => array(
	                'url' => url('ajax', array('query' => 'fid='.$data->field_id.'&op=select&module=field'))
            		)
            	)), 'setting');
              $form['fields']['fields']['field_root_'.$data->field_key] = array(
                '#title' => $data->name,
                '#type' => 'select',
                '#required' => $node->fields[$data->field_key] ? false : $required,
                '#attributes' => array(
                  'class' => 'field_option_children field_option_children_'.$data->field_key,
                  'alt' => $data->field_key
                ),
                '#prefix' => '<div class="form_item form_item_select form_item_selects" id="user_edit_form_field_field_root_'.$data->field_key.'">',
                '#field_suffix' => '<input type="button" value="'.t('field', '增加').'" class="form_select_multiple_button" alt="'.$data->field_key.'" />',
                '#options' => field_get_term_options($options[$data->field_id]),
                '#description' => $data->data['input_description']
              );
              
              $defaults = NULL;
              if ($_POST['fields'][$data->field_key]) {
                $defaults = $_POST['fields'][$data->field_key];
              } else if ($node->fields[$data->field_key]) {
                foreach ($node->fields[$data->field_key] as $de) {
                  $defaults[$de->tid] = $de->tid;
                }
              }
              
              $description = '';
              
              if ($defaults) {
                foreach ($defaults as $default_value) {
                  $form['fields']['fields'][$data->field_key][$default_value] = array(
                    '#type' => 'hidden',
                    '#default_value' => $default_value,
                    '#attributes' => array('class' => 'field_form_selects_option_'.$default_value)
                  );
                  if ($node->fields[$data->field_key]) {
                    $description .= '<span>'.$node->fields[$data->field_key][$default_value]->name;
                    $description .= '<a href="javascript:void(0);" alt="'.$default_value.'" onClick="fields.deleteOption($(this));">('.t('field', '移除').')</a></span>';
                  }
                }
              }
              
              $form['fields']['fields']['field_root_'.$data->field_key]['#description'] = $data->data['input_description'] . '<div class="field_form_selects_view">'.$description.'</div>';
              $form['fields']['fields']['_multiple_'.$data->field_key] = array(
                '#type' => 'hidden',
                '#default_value' => $node->fields[$data->field_key] ? 0 : "",
                '#required' => $required,
                '#attributes' => array(
                  'class' => 'field_select_value field_select_value_'.$data->field_key,
                  'alt' => $data->field_key
                ),
                '#suffix' => '</div>'
              );
            } else {
              $defaults = NULL;
              if ($node->fields[$data->field_key]) {
                foreach ($node->fields[$data->field_key] as $de) {
                  $defaults[$de->tid] = $de->tid;
                }
              }
              $form['fields']['fields'][$data->field_key] = array(
                '#title' => $data->name,
                '#type' => 'selects',
                '#default_value' => $defaults,
                '#required' => $required,
                '#options' => field_get_term_options($options[$field_id], 1),
                '#description' => $data->data['input_description']
              );
            }
          break;
          case 'tags':
            // 标签
            if ($node->fields[$data->field_key]) {
              foreach ($node->fields[$data->field_key] as $de) {
                $field_value .= $de->name.',';
              }
            }
            $form['fields']['fields'][$data->field_key] = array(
              '#title' => $data->name,
              '#type' => 'textfield',
              '#default_value' => $field_value ? rtrim($field_value, ',') : '',
              '#required' => $required,
              '#attributes' => array('size' => 50),
              '#description' => $data->data['input_description']
            );
            if ($data->data['validate']['type']) {
              if ($textfield_opt = module_invoke_all('field_type_tags', 'node_form', $data->data['validate']['type'], $data)) {
                $form['fields']['fields'][$data->field_key] = array_merge($form['fields']['fields'][$data->field_key], $textfield_opt);
              }
            }
          break;
          case 'textfield':
            // 单行文本
            $form['fields']['fields'][$data->field_key] = array(
              '#title' => $data->name,
              '#type' => $data->field_type,
              '#default_value' => $node->fields[$data->field_key]->text,
              '#required' => $required,
              '#attributes' => array('size' => 50),
              '#description' => $data->data['input_description']
            );
            if ($data->data['validate']['type']) {
              if ($textfield_opt = module_invoke_all('field_type_textfield', 'node_form', $data->data['validate']['type'], $data)) {
                $form['fields']['fields'][$data->field_key] = array_merge($form['fields']['fields'][$data->field_key], $textfield_opt);
              }
            }
          break;
          case 'textarea':
            // 多行文本
            $form['fields']['fields'][$data->field_key] = array(
              '#title' => $data->name,
              '#type' => $data->field_type,
              '#default_value' => $node->fields[$data->field_key]->text,
              '#required' => $required,
              '#description' => $data->data['input_description']
            );
          break;
          case 'file': // 文件
            if ($data->data['multi'] > 1) {
              if ($node->fields[$data->field_key]) {
                $multi = $data->data['multi'] - count($node->fields[$data->field_key]);
                if ($multi < 1) {
                  $disabled = true;
                }
              } else {
                $multi = $data->data['multi'];
              }
            } else {
              $multi = 0;
            }
            $form['fields']['fields'][$data->field_key] = array(
              '#title' => $data->name,
              '#type' => 'file',
              '#multi' => $multi,
              '#disabled' => $disabled,
              '#validate' => array(
                'filetype' => $data->data['filetype'],
                'savepath' => $data->data['savepath'],
                'filesize' => $data->data['filesize'] ? $data->data['filesize'] : 999999
              ),
              '#required' => $node->fields[$data->field_key] ? false : $required,
            );
            $description = '';
            if ($node->fields[$data->field_key]) {
              if ($data->data['multi'] > 1) {
                $description = '<span class="field_file_view field_file_view_multi">';
              } else {
                $description = '<span class="field_file_view field_file_view_one">';
              }
              foreach ($node->fields[$data->field_key] as $files) {
                $description .= '<span class="field_file_list">';
                if (strpos($files->filemime, 'image') !== false) {
                  if ($data->data['thumbs']['thumb']) {
                    $description .= l(img(image_get_thumb($files->fid, $files->filepath, $data->data['thumbs']['thumb'])), f($files->filepath), array('html' => true, 'attributes' => array('target' => '_blank')));
                  } else {
                    $description .= l(img($files->filepath), f($files->filepath), array('html' => true, 'attributes' => array('target' => '_blank')));
                  }
                } else {
                  $description .= l(t('field', '下载'), f($fields->filepath), array('html' => true, 'attributes' => array('target' => '_blank', 'title' => $files->filename)));
                }
                if ($data->data['multi'] > 1) {
                  $description .= l(t('field', '删除'), 'files/'.$files->fid.'/delete', array('attributes' => array('class' => 'confirmajax', 'level' => 'parent', 'target' => '_blank')));
                }
                $description .= '</span>';
              }
              $description .= '</span><span class="clear"></span>';
            }
            $form['fields']['fields'][$data->field_key]['#description'] = $data->data['input_description']. $description;
        }
      } else {
        /**
         * 其它模块定义的类型，模块名_字段类型_call_form 函数
         */
        $function = $data->field_module.'_'.$data->field_type.'_field_node_form';
        if (function_exists($function)) $function($data, $node, $form);
      }
    } else {
      /**
       * 自定义处理函数即 fields 数据表中 field_func 字段
       * 传递操作参数 load，传递字段配置对象，引用传递节点对象
       * 操作参数：
       *  load：节点加载
       *  form：节点表单
       *  insert：写入节点
       *  delete：删除节点
       *  update：更新节点
       */
      $data->field_func('form', $data, $node, $form);
    }
  }
}

/**
 * 获取多级字段联动表单
 * @param (object) $field
 *  字段对象
 * @param (*) $value
 *  默认值
 * @param (array) $form
 *  表单值
 */
function field_get_multi_level_field($field, $value, &$form = NULL) {
  if (!$field->field_id) return;
  
  dd_add_js('modules/field/field.js');
  dd_add_css('modules/field/field.css');
  global $conf;

  $options = field_get_cache_term($field->module, $field->type);
  
  switch ($field->field_type) {
    case 'select':
      if ($conf['field_term_children'][$field->field_id]) {
        dd_add_js(array('fields' => array(
          $field->field_key => array(
            'url' => url('ajax', array('query' => 'fid='.$field->field_id.'&op=select&module=field'))
          )
        )), 'setting');
        $form['fields']['fields']['field_root_'.$field->field_key] = array(
          '#title' => $field->name,
          '#type' => 'select',
          '#required' => $field->required,
          '#attributes' => array(
            'class' => 'field_option_children field_option_children_'.$field->field_key,
            'alt' => $field->field_key
          ),
          '#options' => field_get_term_options($options[$field->field_id]),
          '#description' => $field->data['description']
        );
        
        $default_value = NULL;
        if ($_POST['fields'][$field->field_key]) {
          $default_value = $_POST['fields'][$field->field_key];
        } else if ($value) {
          $default_value = $value;
        }
        
        if ($default_value && $terms = field_get_term_childrens($default_value)) {
          static $ajaxId;
          $ajaxId = 0;
          $terms = array_reverse($terms);
          $form['fields']['fields']['field_root_'.$field->field_key]['#prefix'] = '<div class="form_item form_item_select" id="form_field_root_'.$field->field_key.'">';
          $form['fields']['fields']['field_root_'.$field->field_key]['#default_value'] = array_shift($terms);
          $form['fields']['fields']['field_root_'.$field->field_key]['#description'] = '';
          foreach ($terms as $children) {
            ++$ajaxId;
            $form['fields']['fields']['_field_root_'.$field->field_key.$ajaxId] = array(
              '#type' => 'select',
              '#attributes' => array(
                'class' => 'field_option_children',
                'alt' => $field->field_key
              ),
              '#suffix' => '',
              '#default_value' => $children['value'],
              '#options' => $children['option'],
            );
          }
          $form['fields']['fields']['_field_root_'.$field->field_key.$ajaxId]['#suffix'] = '</div>';
          $form['fields']['fields']['_field_root_'.$field->field_key.$ajaxId]['#description'] = $field->data['description'];
        }
        $form['fields']['fields'][$field->field_key] = array(
          '#type' => 'hidden',
          '#default_value' => $default_value,
          '#required' => $required,
          '#attributes' => array(
            'class' => 'field_select_value field_select_value_'.$field->field_key,
            'alt' => $field->field_key
          )
        );
      } else {
        $form['fields']['fields'][$field->field_key] = array(
          '#title' => $field->name,
          '#type' => 'select',
          '#default_value' => $value,
          '#required' => $required,
          '#options' => field_get_term_options($options[$field->field_id], $required),
          '#description' => $field->data['description']
        );
      }
    break;
    case 'selects':
      if ($conf['field_term_children'][$field->field_id]) {
        dd_add_js(array('fields' => array(
          $field->field_key => array(
            'url' => url('ajax', array('query' => 'fid='.$field->field_id.'&op=select&module=field'))
          )
        )), 'setting');
        $form['fields']['fields']['field_root_'.$field->field_key] = array(
          '#title' => $field->name,
          '#type' => 'select',
          '#required' => $node->fields[$field->field_key] ? false : $required,
          '#attributes' => array(
            'class' => 'field_option_children field_option_children_'.$field->field_key,
            'alt' => $field->field_key
          ),
          '#prefix' => '<div class="form_item form_item_select form_item_selects" id="user_edit_form_field_field_root_'.$field->field_key.'">',
          '#field_suffix' => '<input type="button" value="'.t('field', '增加').'" class="form_select_multiple_button" alt="'.$field->field_key.'" />',
          '#options' => field_get_term_options($options[$field->field_id]),
          '#description' => $field->data['description']
        );
        
        $defaults = NULL;
        if ($_POST['fields'][$field->field_key]) {
          $defaults = $_POST['fields'][$field->field_key];
        } else if ($value) {
          foreach ($value as $de) {
            $defaults[$de->tid] = $de->tid;
          }
        }
        
        $description = '';
        
        if ($defaults) {
          foreach ($defaults as $default_value) {
            $form['fields']['fields'][$field->field_key][$default_value] = array(
              '#type' => 'hidden',
              '#default_value' => $default_value,
              '#attributes' => array('class' => 'field_form_selects_option_'.$default_value)
            );
            if ($node->fields[$field->field_key]) {
              $description .= '<span>'.$node->fields[$field->field_key][$default_value]->name;
              $description .= '<a href="javascript:void(0);" alt="'.$default_value.'" onClick="fields.deleteOption($(this));">('.t('field', '移除').')</a></span>';
            }
          }
        }
        
        $form['fields']['fields']['field_root_'.$field->field_key]['#description'] = $field->data['description'] . '<div class="field_form_selects_view">'.$description.'</div>';
        $form['fields']['fields']['_multiple_'.$field->field_key] = array(
          '#type' => 'hidden',
          '#default_value' => $node->fields[$field->field_key] ? 0 : "",
          '#required' => $required,
          '#attributes' => array(
            'class' => 'field_select_value field_select_value_'.$field->field_key,
            'alt' => $field->field_key
          ),
          '#suffix' => '</div>'
        );
      } else {
        $defaults = NULL;
        if ($value) {
          foreach ($value as $de) {
            $defaults[$de->tid] = $de->tid;
          }
        }
        $form['fields']['fields'][$field->field_key] = array(
          '#title' => $field->name,
          '#type' => 'selects',
          '#default_value' => $defaults,
          '#required' => $required,
          '#options' => field_get_term_options($options[$field->field_id], 1),
          '#description' => $field->data['description']
        );
      }
    break;
  }
  return $form['fields'];
}

/**
 * 节点回调字段验证
 */
function field_get_node_validate($module, $type, $value, $node = NULL, $form = NULL) {
  if (!$group = module_invoke($module, 'field_call_group', $type)) {
    return;
  }
  
  if (!$datas = field_get_cache_field_group($module, $type)) return;
  
  global $conf;
  foreach ($datas as $data) {
    if (!$data->field_func) {
      // 没有自定义处理函数的字段
      if ($data->field_module == 'field') {
        $error = t('field', '%string 出现非法选择', array('%string' => $data->name));
        
        switch ($data->field_type) {
          case 'select': // 单选
            if ($value->fields[$data->field_key] && $conf['field_term_children'][$data->field_id] && !db_query('SELECT COUNT(field_id) FROM {fields_term} WHERE field_id = ? AND tid = ?', array($data->field_id, $value->fields[$data->field_key]), array('return' => 'column'))) {
              dd_set_message($error, 'error');
              $t['fields'][$data->field_key]['#error'][] = $error;
            }
          break;
          case 'selects':
            if ($data->required && !$value->fields[$data->field_key]) {
              $error = t('field', '%string 不能为空', array('%string' => $data->name));
              dd_set_message($error, 'error');
              $t['fields'][$data->field_key]['#error'][] = $error;
            } else if ($value->fields[$data->field_key] && $conf['field_term_children'][$data->field_id] && db_query('SELECT COUNT(field_id) FROM {fields_term} WHERE field_id != ? AND tid IN ('.db_get_placeholder($value->fields[$data->field_key]).')', array_merge(array($data->field_id), $value->fields[$data->field_key]), array('return' => 'column'))) {
              dd_set_message($error, 'error');
              $t['fields'][$data->field_key]['#error'][] = $error;
            }
          break;
          case 'tags':
            // 标签
            if ($tags = field_get_string_tags($data->field_id, $value->fields[$data->field_key])) {
            	foreach ($tags as $tag) {
            		if (mb_strlen($tag, 'utf-8') > 64) {
            			$t['fields'][$data->field_key]['#error'][] = t('field', '%string 的长度不超过 %length 字符', array('%string' => $tag, '%length' => 64));
            			break;
            		} else if ($data->data['validate']['type'] &&
            		$msg = module_invoke_all('field_type_tags', 'node_validate', $data->data['validate']['type'], $data, $value->fields[$data->field_key])) {
                  $t['fields'][$data->field_key]['#error'][] = $msg;
                }
            	}
            }
          break;
          case 'textfield':
            // 单行文本
            if ($value->fields[$data->field_key]) {
              $strlen = mb_strlen($value->fields[$data->field_key], 'utf-8');
          		if ($value->fields[$data->field_key] && $strlen > 255) {
          			$t['fields'][$data->field_key]['#error'][] = t('field', '%string 的长度不超过 %length 字符', array('%string' => $data->name, '%length' => 255));
          		} else if ($data->data['validate']['maxsize'] && $strlen > $data->data['validate']['maxsize']) {
                $t['fields'][$data->field_key]['#error'][] = t('field', '%string 的长度不超过 %length 字符', array('%string' => $data->name, '%length' => $data->data['validate']['maxsize']));
          		} else if ($data->data['validate']['minsize'] && $strlen < $data->data['validate']['minsize']) {
                $t['fields'][$data->field_key]['#error'][] = t('field', '%string 的长度不小于 %length 字符', array('%string' => $data->name, '%length' => $data->data['validate']['minsize']));
          		} else if ($data->data['validate']['type'] && 
          		$msg = module_invoke_all('field_type_textfield', 'node_validate', $data->data['validate']['type'], $data, $value->fields[$data->field_key])) {
          		  $t['fields'][$data->field_key]['#error'] = $msg;
              } else if ($data->data['validate']['unique']) {
                if ($value->nid) {
                  if (db_query('SELECT field_id FROM {fields_small} WHERE nid != ? AND field_id = ? AND text = ?',
                  array($value->nid, $data->field_id, $value->fields[$data->field_key]), array('return' => 'column'))) {
                    $t['fields'][$data->field_key]['#error'][] = t('field', '%string 已经存在', array('%string' => $data->name));
                  }
                } else if (db_query('SELECT field_id FROM {fields_small} WHERE field_id = ? AND text = ?',
                array($data->field_id, $value->fields[$data->field_key]), array('return' => 'column'))) {
                  $t['fields'][$data->field_key]['#error'][] = t('field', '%string 已经存在', array('%string' => $data->name));
                }
              }
            }
          break;
          case 'textarea':
            if ($value->fields[$data->field_key]) {
              // 多行文本
          		$strlen = mb_strlen($value->fields[$data->field_key], 'utf-8');
          		
              if ($data->data['validate']['maxsize'] && $strlen > $data->data['validate']['maxsize']) {
                $t['fields'][$data->field_key]['#error'][] = t('field', '%string 的长度不超过 %length 字符', array('%string' => $data->name, '%length' => $data->data['validate']['maxsize']));
              } else if ($data->data['validate']['minsize'] && $strlen < $data->data['validate']['minsize']) {
                $t['fields'][$data->field_key]['#error'][] = t('field', '%string 的长度不小于 %length 字符', array('%string' => $data->name, '%length' => $data->data['validate']['minsize']));
              }
            }
          break;
          //case 'file': // 上传文件在 submit 环节处理
        }
      } else {
        /**
         * 其它模块定义的类型，模块名_字段类型_call_validate 函数
         */
        $function = $data->field_module.'_'.$data->field_type.'_field_node_validate';
        if (function_exists($function)) $t = $function($data, $value, $node, $form);
      }
    } else {
      $t = $data->field_func('validate', $data, $node, $form, $value);
    }
  }
  return $t;
}

/**
 * 节点回调显示
 * @param (string) $module
 *  模块名称
 * @param (string) $type
 *  字段组名
 * @param (object) $node
 *  节点对象
 * @param (int) $type
 *  显示方式：
 *    0：按类型分组，如 $node->field_view['tags'][$data->field_key]
 *    1、按 field_key 分组，如 $node->field_view[$data->field_key]，注意：若节点下有两个字段组，可能存在相同 field_key
 */
function field_get_node_view($module, $type, &$node, $view_type = 0) {
  if (!$datas = field_get_cache_field_group($module, $type)) return;
  
  global $conf;
  foreach ($datas as $data) {
    
    if (!isset($node->fields[$data->field_key])) continue;
    
    if (!$data->field_func) {
      // 没有自定义处理函数的字段
      if ($data->field_module == 'field') {
        switch ($data->field_type) {
          case 'select':  case 'radio':
            $content = l($node->fields[$data->field_key]->name, 'category/'.$node->fields[$data->field_key]->tid);
            if ($view_type) {
              $node->field_view[$data->field_key] = array(
                '#content' => $content,
                '#name' => $data->name
              );
            } else {
              $node->field_view['category'][$data->field_key] = array(
                '#content' => $content,
                '#name' => $data->name
              );
            }
          break;
          case 'checkbox': case 'selects':
            $term = $content = NULL;
            foreach ($node->fields[$data->field_key] as $term) {
              $content .= l($term->name, 'category/'.$term->tid);
            }
            if ($view_type) {
              $node->field_view[$data->field_key] = array(
                '#content' => $content,
                '#name' => $data->name
              );
            } else {
              $node->field_view['category'][$data->field_key] = array(
                '#content' => $content,
                '#name' => $data->name
              );
            }
          break;
          case 'tags':
            $term = $content = NULL;
            foreach ($node->fields[$data->field_key] as $term) {
              $content .= l($term->name, 'category/'.$term->tid);
            }
            if ($view_type) {
              $node->field_view[$data->field_key] = array(
                '#content' => $content,
                '#name' => $data->name
              );
            } else {
              $node->field_view['tags'][$data->field_key] = array(
                '#content' => $content,
                '#name' => $data->name
              );
            }
          break;
          case 'textfield':
           $textfield = check_plain($node->fields[$data->field_key]->text);
           if ($data->data['validate']['type']) {
              if ($textfield_value = module_invoke_all('field_type_textfield', 'node_view', $data->data['validate']['type'], $data, $node->fields[$data->field_key]->text)) {
                $textfield = $textfield_value[0];
              }
            }
            if ($view_type) {
              $node->field_view[$data->field_key] = array(
                '#content' => $textfield,
                '#name' => $data->name
              );
            } else {
              $node->field_view['textfield'][$data->field_key] = array(
                '#content' => $textfield,
                '#name' => $data->name
              );
            }
          break;
          case 'textarea':
            if ($view_type) {
              $node->field_view[$data->field_key] = array(
                '#content' => filter_view($node->fields[$data->field_key]->text, $data->data['format']),
                '#name' => $data->name
              );
            } else {
              $node->field_view['textarea'][$data->field_key] = array(
                '#content' => filter_view($node->fields[$data->field_key]->text, $data->data['format']),
                '#name' => $data->name
              );
            }
          break;
          case 'file':
            $content = NULL;
            foreach ($node->fields[$data->field_key] as $file) {
              if ($data->data['thumbs']['medium']) {
                $content .= l(img(image_get_thumb($file->fid, $file->filepath, $data->data['thumbs']['medium'])), f($file->filepath),
                array('html' => 1, 'attributes' => array('target' => '_blank', 'title' => $file->filename, 'alt' => $file->filename)));
              } else {
                $content .= l(img($file->filepath), f($file->filepath),
                array('html' => 1, 'attributes' => array('target' => '_blank', 'title' => $file->filename, 'alt' => $file->filename)));
              }
            }
            if ($view_type) {
              $node->field_view[$data->field_key] = array(
                '#content' => $content, '#name' => $data->name
              );
            } else {
              $node->field_view['file'][$data->field_key] = array(
                '#content' => $content, '#name' => $data->name
              );
            }
        }
      } else {
        /**
         * 其它模块定义的类型，模块名_字段类型_call_view 函数
         */
        $function = $data->field_module.'_'.$data->field_type.'_field_node_view';
        if (function_exists($function)) $t = $function($data, $node, $view_type);
      }
    } else {
      $data->field_func('view', $data, $node, $view_type);
    }
  }
}

/**
 * 节点回调字段保存
 * @param (string) $module
 *  定义字段组的模块名称
 * @param (string) $type
 *  字段组标识，与 hook_field_call_group 中定义的一致
 * @param (object) $value
 *  待保存的数据，一般为用户提交的表单数据，必须有 $value->nid，以便于字段和节点关联
 * @param (object) $node
 *  旧的数据，如果是编辑节点，可以传递旧的节点数据
 * @param (array) $form
 *  表单
 * @param (object) $ac
 *  用户对象，默认以当前用户权限验证
 * @return (void)
 */
function field_get_node_save($module, $type, $value, $node = NULL, $form = NULL, $ac = NULL) {
  if (!$value->nid) return false;
  if (!$group = module_invoke($module, 'field_call_group', $type)) {
    return;
  }
  
  if (!$datas = field_get_cache_field_group($module, $type)) return;
  
  if (!isset($node)) {
    $node = new stdClass();
    $node->nid = $value->nid;
    field_get_node_load($module, $type, $node, $ac);
  }
  
  global $conf;
  $cids = $tids = array();
  foreach ($datas as $data) {
    
    if (!field_access('update', $data, $node, $ac)) {
      continue;
    }
    
    if (!$data->field_func) {
      // 没有自定义处理函数的字段
      if ($data->field_module == 'field') {
        switch ($data->field_type) {
          case 'radio': case 'select':
            $field_ids[$data->field_id] = $data->field_id;
            
            if ($value->fields[$data->field_key]) $cids[] = $value->fields[$data->field_key];
          break;
          case 'checkbox': case 'selects':
            $field_ids[$data->field_id] = $data->field_id;
            if (is_array($value->fields[$data->field_key])) $cids = array_merge($cids, $value->fields[$data->field_key]);
          break;
          case 'tags':
            $field_ids[$data->field_id] = $data->field_id;
            
            if ($tags = field_get_string_tags($data->field_id, $value->fields[$data->field_key])) {
          		foreach ($tags as $tag) {
                if ($node->fields[$data->field_key]) {
                  if (in_array($tag, $node->fields[$data->field_key])) {
                    $tids[] = $tid;
                    continue;
                  }
                }
          			if ($tid = db_query('SELECT tid FROM {fields_term} WHERE name = ? AND field_id = ?', array($tag, $data->field_id), array('return' => 'column'))) {
          				$tids[] = $tid;
          			} else {
          			  $strlen = mb_strlen($tag);
                  if ($data->data['validate']['maxsize'] && $strlen > $data->data['validate']['maxsize']) {
                    continue;
                  }
                  if ($data->data['validate']['minsize'] && $strlen < $data->data['validate']['minsize']) {
                    continue;
                  }
            			if (db_exec('INSERT INTO {fields_term} (field_id, name, pid, weight) VALUES (?, ?, 0, 0)', array($data->field_id, $tag))) {
            				$tid = db_last_insert_id();
            				$tids[] = $tid;
            			}
          			}
          		}
            }
          break;
          case 'textfield':
            if ($data->data['validate']['type']) {
              if ($textfield_value = module_invoke_all('field_type_textfield', 'node_save', $data->data['validate']['type'], $data, $value->fields[$data->field_key])) {
                $value->fields[$data->field_key] = $textfield_value;
              }
            }
            db_exec('DELETE FROM {fields_small} WHERE nid = ? AND field_id = ?', array($value->nid, $data->field_id));
            if ($value->fields[$data->field_key]) {
              db_exec('INSERT INTO {fields_small} (nid, field_id, text) VALUES (?, ?, ?)', array($value->nid, $data->field_id, $value->fields[$data->field_key]));
            }
          break;
          case 'textarea':
            db_exec('DELETE FROM {fields_long} WHERE nid = ? AND field_id = ?', array($value->nid, $data->field_id));
            if ($value->fields[$data->field_key]) {
              db_exec('INSERT INTO {fields_long} (nid, field_id, text) VALUES (?, ?, ?)', array($value->nid, $data->field_id, $value->fields[$data->field_key]));
            }
          break;
          case 'file':
            if ($_FILES['fields'] && $_FILES['fields']['name'][$data->field_key]) {
              $validate = array(
                'filetype' => $data->data['filetype'],
                'savepath' => $data->data['savepath'],
                'filesize' => $data->data['filesize'] ? $data->data['filesize'] : 999999
              );
              if (is_array($_FILES['fields']['name'][$data->field_key])) {
                $files = 0;
                foreach ($_FILES['fields']['name'][$data->field_key] as $i => $name) {
                  if ($i > $data->data['multi']) break;
                  if (!$message = file_validate_error($_FILES['fields']['error'][$data->field_key][$i])) {
                    if ($data->data['filename']) {
                      $validate['filename'] = dd_get_token($data->data['filename'], $value);
                    } else {
                      $validate['filename'] = NULL;
                    }
                    if ($data->data['extension']) {
                      $validate['extension'] = $data->data['extension'];
                    } else {
                      $validate['extension'] = NULL;
                    }
                    $file = array(
                      'name' => $name,
                      'type' => $_FILES['fields']['type'][$data->field_key][$i],
                      'size' => $_FILES['fields']['size'][$data->field_key][$i],
                      'tmp_name' => $_FILES['fields']['tmp_name'][$data->field_key][$i],
                      'ext_id' => $data->field_id, // 字段id
                      'ext_id2' => $value->nid, // 节点id
                      'ext_type' => 'field_file', // 扩展标记
                    );
                    if ($newfile = file_save_upload($file, $validate)) {
                      if ($newfile->imagetotype) {
                        image_to_type_data($newfile->filepath, $newfile->imagetotype[0], $newfile->imagetotype[1], $newfile->filepath);
                      }
                      ++$files;
                    }
                  } else if ($message !== 4) {
                    dd_set_message($message, 'error');
                  }
                }
                if ($node->fields[$data->field_key]) {
                  $k = $files + count($node->fields[$data->field_key]) - $data->data['multi'];
                  if ($k > 0) {
                    foreach ($node->fields[$data->field_key] as $file) {
                      if ($k == 0) break;
                      file_delete($file->fid, 1, $file->filepath);
                      --$k;
                    }
                  }
                }
              } else {
                if ($node->fields[$data->field_key]) {
                  foreach ($node->fields[$data->field_key] as $file) {
                    file_delete($file->fid, 1, $file->filepath);
                  }
                }
                
                if ($data->data['filename']) {
                  $validate['filename'] = dd_get_token($data->data['filename'], $value);
                } else {
                  $validate['filename'] = NULL;
                }
                
                if ($data->data['extension']) {
                  $validate['extension'] = $data->data['extension'];
                } else {
                  $validate['extension'] = NULL;
                }
                
                if (!$message = file_validate_error($_FILES['fields']['error'][$data->field_key])) {
                  $file = array(
                    'name' => $_FILES['fields']['name'][$data->field_key],
                    'type' => $_FILES['fields']['type'][$data->field_key],
                    'size' => $_FILES['fields']['size'][$data->field_key],
                    'tmp_name' => $_FILES['fields']['tmp_name'][$data->field_key],
                    'ext_id' => $data->field_id,
                    'ext_id2' => $value->nid,
                    'ext_type' => 'field_file'
                  );
                  if ($newfile = file_save_upload($file, $validate)) {
                    if ($newfile->imagetotype) {
                      image_to_type_data($newfile->filepath, $newfile->imagetotype[0], $newfile->imagetotype[1], $newfile->filepath);
                    }
                  }
                } else if ($message !== 4) {
                  dd_set_message($message, 'error');
                }
              }
            }
          break;
        }
      } else {
        /**
         * 其它模块定义的类型，模块名_字段类型_call_save 函数
         */
        $function = $data->field_module.'_'.$data->field_type.'_field_node_save';
        if (function_exists($function)) $function($data, $value, $node, $form);
      }
    } else {
      $data->field_func('save', $data, $node, $form, $value);
    }
  }
  
  if ($value->nid && $field_ids) {
    db_exec('DELETE FROM {fields_term_node} WHERE nid = ? AND tid IN (SELECT tid FROM {fields_term} WHERE field_id IN ('.db_get_placeholder($field_ids).'))',  array_merge(array($value->nid), $field_ids));
	}
  
	if ($tids) {
		$cids = array_merge($cids, $tids);
	}
  
	if ($cids) {
		foreach ($cids as $cid) {
			$nids[] = '('.$cid .','.$value->nid.')';
		}
		db_exec('INSERT INTO {fields_term_node} (tid, nid) VALUES '. implode(',', $nids));
	}
	
	cache_del('cid', $module.$type.$value->nid, 'cache_field');
}

/**
 * 删除节点下的字段数据，不验证权限，一般节点被删除，其所属字段也应被删除
 * @param (string) $module
 *  定义字段组的模块名称
 * @param (string) $type
 *  字段组标识，与 hook_field_call_group 中定义的一致
 * @param (object) $node
 *  节点对象，必须包含 $node->nid
 */
function field_get_node_delete($module, $type, $node) {
  
  if (empty($node->nid)) return;
  
  if (!$datas = field_get_cache_field_group($module, $type)) return;
  
  foreach ($datas as $data) {

    if (!$data->field_func) {
      // 没有自定义处理函数的字段
      if ($data->field_module == 'field') {
        switch ($data->field_type) {
          case 'radio': case 'select': case 'checkbox': case 'selects': case 'tags':
            db_exec('DELETE FROM {fields_term_node} WHERE nid = ? AND tid IN 
            (SELECT tid FROM {fields_term} WHERE field_id = ?)', array($node->nid, $data->field_id));
          break;
          
          case 'textfield':
            db_exec('DELETE FROM {fields_small} WHERE nid = ? AND field_id = ?',
            array($node->nid, $field_id));
          break;
          
          case 'textarea':
            db_exec('DELETE FROM {fields_long} WHERE nid = ? AND field_id = ?',
            array($node->nid, $field_id));
            
          break;
          case 'file':
            if ($files = field_get_node_data($node->nid, 'file')) {
              foreach ($files as $file) {
                file_delete($file->fid, 1, $file->filepath);
              }
            }
          break;
        }
      } else {
        /**
         * 其它模块定义的类型，模块名_字段类型_call_save 函数
         */
        $function = $data->field_module.'_'.$data->field_type.'_field_node_delete';
        if (function_exists($function)) $function($data, $node);
      }
      
    } else {
      $data->field_func('delete', $data, $node);
    }
    
  }
  
  cache_del('cid', $module.$type.$node->nid, 'cache_field');
}

/**
 * 字符串解析为标签，以“,”或“，”为分隔符
 */
function field_get_string_tags($id, $text) {
  static $tags;
  if (!isset($tags[$id])) {
    $text = str_replace('，', ',', $text);
    if (strpos($text, ',') !== false) {
      foreach (explode(',', $text) as $tag) {
        if ($tag =  trim($tag)) {
          $tags[$id][] = $tag;
        }
      }
      $tags[$id] = array_unique($tags[$id]);
    } else if ($text = trim($text)) {
      $tags[$id][] = $text;
    }
  }
  return $tags[$id];
}

/**
 * @Implement of hook_system_cache_clear()
 */
function field_system_cache_clear($op = 'list', $v = NULL) {
  switch ($op) {
    case 'list':
    return array(
      'fields' => t('field', '清除字段缓存，当字段信息发生更改时应选择此项'),
    );
    case 'submit':
      if ($v['value']['fields']) {
        field_get_cache_field(NULL, 1);
        field_set_cache_term();
      }
  }
}
