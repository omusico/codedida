<?php
// $Id$

/**
 * @Implement of hook_menu()
 */
function blog_menu(){
  $items = array();
  $items['node/%'] = array(
    'load_functions' => array(1 => array('blog_load', 'page')),
    'access_arguments' => array('blog view'),
    'page_callback' => 'blog_page',
    'page_arguments' => array(1),
    'file' => 'blog.page.inc',
  );
  $items['admin/blogs'] = array(
    'title' => '管理日志',
    'access_callback' => 'blog_is_admin_lists',
    'page_callback' => 'blog_admin_lists',
    'file' => 'blog.admin.inc',
  );
  $items['admin/blogs/import'] = array(
    'access_callback' => 'dd_is_root_admin',
    'page_callback' => 'blog_admin_import',
    'file' => 'blog.import.inc',
  );
  $items['admin/blogs/settings'] = array(
    'title' => '日志设置',
    'access_arguments' => array('admin blog settings'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('blog_admin_settings'),
    'file' => 'blog.admin.inc',
  );
  $items['admin/blogs/comments'] = array(
    'title' => '评论管理',
    'access_callback' => 'blog_is_admin_lists',
    'page_callback' => 'blog_admin_comments',
    'file' => 'blog.admin.inc',
  );
  $items['admin/blogs/fields'] = array(
    'title' => '日志字段',
    'access_arguments' => array('admin blog fields'),
    'page_callback' => 'blog_admin_fields',
    'file' => 'blog.admin.inc',
  );
  $items['admin/blogs/draft'] = array(
    'title' => '草稿',
    'access_callback' => 'blog_is_admin_lists',
    'page_callback' => 'blog_admin_drafts',
    'file' => 'blog.admin.inc',
  );
  $items['admin/blogs/add'] = array(
    'title' => '发表日志',
    'access_arguments' => array('blog add'),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('blog_node_form'),
    'file' => 'blog.form.inc',
  );
  $items['admin/blogs/edit/%'] = array(
    'title' => '编辑日志',
    'load_functions' => array(3 => array('blog_load')),
    'access_callback' => 'blog_access_updated',
    'access_arguments' => array(3),
    'page_callback' => 'dd_get_form',
    'page_arguments' => array('blog_node_form', 3),
    'file' => 'blog.form.inc',
  );
  $items['admin/blogs/delete/%'] = array(
    'load_functions' => array(3 => array('blog_load')),
    'access_callback' => 'blog_access_deleted',
    'access_arguments' => array(3),
    'page_callback' => 'blog_node_deleted',
    'page_arguments' => array(3),
    'file' => 'blog.admin.inc',
  );
  $items['tools/autosave'] = array(
    'access_callback' => true,
    'page_callback' => 'blog_autosave',
  );
  return $items;
}

/**
 * 验证用户是否有进入日志管理列表的权限
 */
function blog_is_admin_lists(){
  return user_access('blog all updated') || user_access('blog own updated');
}

/**
 * 日志状态
 * @param (int) $id
 * 	获取指定 id 对应的状态文字描述
 */
function blog_get_status($id = NULL){
  $array = array(0 => '未发布', 1 => '已发布', 2 => '登录可见', 9 => '密码访问');
  if(isset($id)){
    return $array[$id] ? $array[$id] : $array[9];
  }else{
    return $array;
  }
}

/**
 * @Implement of hook_prem()
 */
function blog_perm(){
  return array(
    'blog add' => t('blog', '发表日志'),
    'blog all updated' => t('blog', '编辑所有日志'),
    'blog own updated' => t('blog', '编辑自己的日志'),
    'blog all deleted' => t('blog', '删除所有日志'),
    'blog own deleted' => t('blog', '删除自己的日志'),
    'blog view' => t('blog', '浏览日志'),
    'admin blog settings' => t('blog', '管理日志设置'),
    'admin blog fields' => t('blog', '管理日志字段')
  );
}

/**
 * @Implement of hook_system_admin_menus()
 */
function blog_system_admin_menus(){
  return array(array(
    array(t('blog', '创建日志'), 'admin/blogs/add'),
    array(t('blog', '日志管理'), 'admin/blogs'),
    array(t('blog', '评论管理'), 'admin/blogs/comments'),
    array(t('blog', '日志字段'), 'admin/blogs/fields'),
    array(t('blog', '日志设置'), 'admin/blogs/settings'),
    array(t('blog', '导入数据'), 'admin/blogs/import'),
  ), t('blog', '日志管理'));
}

/**
 * @Implement of hook_theme()
 */
function blog_theme(){
  return array(
		'blog' => array(
		  'tpl' => 'blog.tpl.php',
		  'args' => array('blog'),
		),
    'blog_comment' => array(
      'tpl' => 'blog_comment.tpl.php',
      'args' => array('comment')
    )
  );
}
/**
 * @Implement of hook_alias_reservation
 */
function blog_alias_reservation(){
	return array('node/');
}

/**
 * 载入日志
 */
function blog_load($bid, $position = NULL, $blog = NULL){
  static $blogs;
  
  if($blog) $bid = $blog->bid;
  
  if(!isset($blogs[$bid])){
    if(!$blog){
      $blog = db_query('SELECT b.*, u.uid, u.name, a.alias FROM {blog} b INNER JOIN {users} u ON b.uid = u.uid LEFT JOIN {alias} a ON b.bid = a.tid AND a.type = ? WHERE b.bid = ?', array('blog', $bid), array('return' => 'one'));
    }
    
    if($blog){
    	if($position){
        $blog->position = $position;
      }else{
        $blog->position = 'summary';
      }
      
    	$blog->title = $blog->title;
      $blog->name = $blog->name;
      $blog->nid = $blog->bid;
      
    	if(!$blog->alias){
    		$blog->path = 'node/' . $blog->bid;
    	}else{
    		$blog->path = $blog->alias;
    	}
      
      if($blog->trackback == 1 || ($blog->trackback == 0 && $GLOBALS['conf']['blog_trackback'] == 1)){
        $blog->trackback_url = f('custom.php?module=blog&op=trackback&bid='.$blog->bid);
      }
      
      global $user;
      
      if(blog_access_view($blog)){
        module_alter_all('blog_load', $blog);
        field_get_node_load('blog', 'field', $blog);
        $blog->is_comment = blog_user_is_comment($blog);
        $blogs[$bid] = $blog;
      }else{
        $blogs[$bid] = false;
      }
      
    }else{
      $blogs[$bid] = false;
    }
  }
  return $blogs[$bid];
}

/**
 * 自动保存
 */
function blog_autosave(){
  if($_GET['op'] == 'blog' && user_access('blog all blog') && $_POST['form_token']){
    global $user;
    if(temp_set($_POST['form_token'], $_POST, 'autoSaveBlog')){
      echo 'ok';
    }
  }
  exit;
}

/**
 * 验证日志创建权限
 */
function blog_access_created($ac = NULL){
  return user_access('blog add', $ac);
}

/**
 * 验证日志编辑权限
 */
function blog_access_updated(&$blog, $ac = NULL){
  if(!$ac) $ac = $GLOBALS['user'];
  if($blog->status && strlen($blog->status) > 4){
    $blog->pass = $blog->status;
    $blog->status = 9;
  }
  return user_access('blog all updated', $ac) || ($ac->uid == $blog->uid && user_access('blog own updated', $ac));
}

/**
 * 验证日志删除权限
 */
function blog_access_deleted($blog, $ac = NULL){
  if(!$ac) $ac = $GLOBALS['user'];
  return user_access('blog all deleted', $ac) || ($ac->uid == $blog->uid && user_access('blog own deleted', $ac));
}

/**
 * 验证日志浏览权限
 */
function blog_access_view(&$blog, $ac = NULL){
  if(!$ac) $ac = $GLOBALS['user'];
  
  if($blog->status && strlen($blog->status) > 4){
    $blog->pass = $blog->status;
    $blog->status = 9;
  }
  switch($blog->status){
    case 1:
    return user_access('blog view', $ac);
    case 0:
    return $ac->uid == $blog->uid;
    break;
    case 2:
      if(!$ac->uid && user_access('blog view', $ac)){
        $v = new stdClass();
        $v->body = t('blog', '本篇日志设需要登录才能浏览，请 !link', array('!link' => l(t('blog', '登录'), 'user/login', dd_redirect())));
        $v->bid = $blog->bid;
        $v->title = t('blog', '登录以浏览');
        $v->uid = $blog->uid;
        $v->status = $blog->status;
        $v->name = var_get_key('user', 'anonymous', '游客');
        $v->updated = $v->created = $_SERVER['REQUEST_TIME'];
        if($blog->position == 'summary'){
          $blog = $v;
        }else{
          dd_get_access();
        }
      }
    return true;
    case 9:
      if($ac->uid != $blog->uid && $_SESSION['blogPass'][$blog->bid] != $blog->pass){
        $v = new stdClass();
        $v->body = t('blog', '本篇日志设置了访问密码，你需要正确输入密码才能浏览') . dd_get_form('blog_pass_form', $blog->bid);
        $v->bid = $blog->bid;
        $v->title = t('blog', '输入密码以浏览');
        $v->uid = $blog->uid;
        $v->status = $blog->status;
        $v->name = var_get_key('user', 'anonymous', '游客');
        $v->updated = $v->created = $_SERVER['REQUEST_TIME'];
        if($blog->position == 'summary'){
          $blog = $v;
        }else{
          dd_set_title(array($v->title));
          echo theme('print', $v->body);
          exit;
        }
      }
    return true;
  }
}

/**
 * 输出日志
 * 触发 hook_blog_view()
 */
function blog_view($blog){
  $blog->url = url($blog->path);
  field_get_node_view('blog', 'field', $blog);
  module_alter_all('blog_view', $blog);
  
	$blog->title = check_plain($blog->title);
  $blog->name = check_plain($blog->name);
  
  /*
  if($blog->position == 'summary' && $e = strpos($blog->body, '<!-- break -->')){
    $blog->body = substr($blog->body, 0, $e);
  }
  */
  
  if($blog->summary){
    $blog->summary = filter_view($blog->summary, $blog->format);
  }
  
  $blog->body = filter_view($blog->body, $blog->format);
  
  if($blog->field_view['category']){
    foreach($blog->field_view['category'] as $cat){
      $blog->category .= $cat['#content'];
    }
  }
  
  if($blog->field_view['tags']){
    foreach($blog->field_view['tags'] as $cat){
      $blog->tags .= $cat['#content'];
    }
  }
  
  if($blog->is_updated = blog_access_updated($blog)){
    $blog->updated_url = url('admin/blogs/edit/'.$blog->bid, dd_redirect());
  }
  
  if($blog->position == 'page'){
    if($fetch = db_query('SELECT bid, title FROM {blog} WHERE uid = ? AND status > 0 ORDER BY bid ASC', array($blog->uid))){
      $next = $prev = $current = NULL;
      foreach($fetch as $o){
        if($current){
          $next = $o;
          break;
        }
        if($o->bid == $blog->bid){
          $current = 1;
        }else {
          $prev = $o;
        }
      }
      if($next){
        $blog->next_link = l($next->title, 'node/'.$next->bid);
      }
      if($prev){
        $blog->prev_link = l($prev->title, 'node/'.$prev->bid);
      }
    }
  }
  return theme('blog', $blog);
}

/**
 * 生成摘要
 * @param (string) $body
 *  正文
 * @param (int) $size
 *  摘要长度
 * @param (int) $format
 *  输入格式 id
 */
function blog_summary($body, $size, $format = NULL){
  // 输入格式中有 PHP 过滤器
  if(!isset($format) && filter_is_php($format)){
    return $body;
  }
  
  // 包含截断标志，优先
  if($e = strpos($body, '<!-- break -->')){
    $body = mb_substr($body, 0, $e);
    $size = mb_strlen(strip_tags($body));
    $body = $body .'</span>';
  }
  
  $_size = mb_strlen($body, 'utf-8');
  
  if($_size <= $size) return $body;
  
  $strlen_var = strlen($body);
  
  // 不包含 html 标签
  if(strpos($body, '<') === false){
    return mb_substr($body, 0, $size);
  }
  
  // html 代码标记
  $html_tag = 0;
  
  // 摘要字符串
  $summary_string = '';
  
  /**
   * 数组用作记录摘要范围内出现的 html 标签
   * 开始和结束分别保存在 left 和 right 键名下
   * 如字符串为：<h3><p><b>a</b></h3>，假设 p 未闭合
   * 数组则为：array('left' => array('h3', 'p', 'b'), 'right' => 'b', 'h3');
   * 仅补全 html 标签，<? <% 等其它语言标记，会产生不可预知结果
   */
  $html_array = array('left' => array(), 'right' => array());
  for($i = 0; $i < $strlen_var; ++$i) {
    if(!$size){
      break;
    }
    
    $current_var = substr($body, $i, 1);
    
    if($current_var == '<'){
      // html 代码开始
      $html_tag = 1;
      $html_array_str = '';
    }else if($html_tag == 1){
      // 一段 html 代码结束
      if($current_var == '>'){
        /**
         * 去除首尾空格，如 <br /  > < img src="" / > 等可能出现首尾空格
         */
        $html_array_str = trim($html_array_str);
        
        /**
         * 判断最后一个字符是否为 /，若是，则标签已闭合，不记录
         */
        if(substr($html_array_str, -1) != '/'){
          
          // 判断第一个字符是否 /，若是，则放在 right 单元
          $f = substr($html_array_str, 0, 1);
          if($f == '/'){
            // 去掉 /
            $html_array['right'][] = str_replace('/', '', $html_array_str);
          }else if($f != '?'){
            // 判断是否为 ?，若是，则为 PHP 代码，跳过
            
            /**
             * 判断是否有半角空格，若有，以空格分割，第一个单元为 html 标签
             * 如 <h2 class="a"> <p class="a">
             */
            if(strpos($html_array_str, ' ') !== false){
              // 分割成2个单元，可能有多个空格，如：<h2 class="" id="">
              $html_array['left'][] = strtolower(current(explode(' ', $html_array_str, 2)));
            }else{
              /**
               * * 若没有空格，整个字符串为 html 标签，如：<b> <p> 等
               * 统一转换为小写
               */
              $html_array['left'][] = strtolower($html_array_str);
            }
          }
        }
        
        // 字符串重置
        $html_array_str = '';
        $html_tag = 0;
      }else{
        /**
         * 将< >之间的字符组成一个字符串
         * 用于提取 html 标签
         */
        $html_array_str .= $current_var;
      }
    }else{
      // 非 html 代码才记数
      --$size;
    }
    
    $ord_var_c = ord($body{$i});
    
    switch (true) {
      case (($ord_var_c & 0xE0) == 0xC0):
        // 2 字节
        $summary_string .= substr($body, $i, 2);
        $i += 1;
      break;
      case (($ord_var_c & 0xF0) == 0xE0):
        
        // 3 字节
        $summary_string .= substr($body, $i, 3);
        $i += 2;
      break;
      case (($ord_var_c & 0xF8) == 0xF0):
        // 4 字节
        $summary_string .= substr($body, $i, 4);
        $i += 3;
      break;
      case (($ord_var_c & 0xFC) == 0xF8):
        // 5 字节
        $summary_string .= substr($body, $i, 5);
        $i += 4;
      break;
      case (($ord_var_c & 0xFE) == 0xFC):
        // 6 字节
        $summary_string .= substr($body, $i, 6);
        $i += 5;
      break;
      default:
        // 1 字节
        $summary_string .= $current_var;
    }
  }
  $summary_string .= '…';
  if($html_array['left']){
    /**
     * 比对左右 html 标签，不足则补全
     */
    
    /**
     * 交换 left 顺序，补充的顺序应与 html 出现的顺序相反
     * 如待补全的字符串为：<h2>abc<b>abc<p>abc
     * 补充顺序应为：</p></b></h2>
     */
    $html_array['left'] = array_reverse($html_array['left']);
    
    foreach($html_array['left'] as $index => $tag){
      // 判断该标签是否出现在 right 中
      $key = array_search($tag, $html_array['right']);
      if($key !== false){
        // 出现，从 right 中删除该单元
        unset($html_array['right'][$key]);
      }else{
        // 没有出现，需要补全
        $summary_string .= '</'.$tag.'>';
      }
    }
  }
  return $summary_string;
}

/**
 * 日志密码验证表单
 */
function blog_pass_form($bid){
  $form['settings'] = array(
    '#ajax_validate' => 1,
    '#validate' => array('blog_pass_form_validate'),
    '#attributes' => array(
	    'class' => 'blog_pass_form',
	    'id' => 'blog_pass_form_'. $bid
    )
  );
  $form['fields']['bid'] = array(
    '#type' => 'hidden',
    '#default_value' => $bid,
    '#constant' => 1
  );
  $form['fields']['pass'] = array(
    '#type' => 'password',
    '#title' => t('blog', '访问密码'),
  );
  $form['fields']['submit'] = array('#type' => 'submit');
  
  return $form;
}

function blog_pass_form_validate($form, $v){
  $pass = md5($v['pass']);
  if($pass == db_query('SELECT status FROM {blog} WHERE bid = ?', array($v['bid']), array('return' => 'column'))){
    $_SESSION['blogPass'][$v['bid']] = $pass;
  }else{
    dd_set_message('密码错误', 'error');
    return true;
  }
}

/**
 * 验证当前用户是否可发表评论
 */
function blog_user_is_comment($blog){
  global $user, $conf;
  static $comments;
  if(!isset($comments[$user->uid][$blog->bid])){
    $comments[$user->uid][$blog->bid] = false;
    if(!$blog->comment){
      if($conf['blog_comment'] == 1 || ($conf['blog_comment'] == 2 && $user->uid)){
        $comments[$user->uid][$blog->bid] = true;
      }
    }else if($blog->comment == 2 || ($blog->comment == 3 && $user->uid)){
      $comments[$user->uid][$blog->bid] = true;
    }
  }
  return $comments[$user->uid][$blog->bid];
}

/**
 * 评论列表
 */
function blog_comment_view($blog){
  if(var_get('blog_comment_pager_order')){
    $desc = 'DESC';
  }else{
    $desc = 'ASC';
  }
  
  $pager = var_get('blog_comment_pager_count', 20);
  if($fetch = pager_query('SELECT c.*, u.name AS username FROM {blog_comment} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.bid = ? AND c.status = 1 ORDER BY c.cid '.$desc, $pager, 0, NULL, array($blog->bid))){
    $i = 1;
    foreach($fetch as $o){
      $o->count = $pager*$_GET['page']+$i;
      $o->body = filter_view($o->body, $o->format);
      if(!$o->name) $o->name = $o->username;
      
      $comments .= theme('blog_comment', $o);
      ++$i;
    }
    $comments .= pager_view();
    return $comments;
  }
}

/**
 * 评论表单
 */
function blog_comment_form($blog, $comment = NULL){
  global $user, $conf;
  
  // 当前用户禁止评论
  if(!$blog->is_comment) return;
  
  if($user->uid){
    $form['fields']['name'] = array(
      '#title' => t('blog', '昵称'),
      '#value' => user_name($user)
    );
  }else{
    if($_COOKIE['blog_anonymous']){
      if(strpos($_COOKIE['blog_anonymous'], '[#@#]') !== false){
        list($name, $mail, $site) = explode('[#@#]', $_COOKIE['blog_anonymous']);
      }else{
        $name = $_COOKIE['blog_anonymous'];
      }
    }else{
      $name = $conf['blog_anonymous_name'];
    }
    $form['fields']['name'] = array(
      '#title' => t('blog', '昵称'),
      '#type' => 'textfield',
      '#default_value' => $name,
      '#required' => $conf['blog_is_anonymous'][1]
    );
    $form['fields']['mail'] = array(
      '#title' => t('blog', '邮箱'),
      '#type' => 'textfield',
      '#default_value' => $mail,
      '#attributes' => array(
        'class' => "{email:true}"
      ),
      '#required' => $conf['blog_is_anonymous'][2]
    );
    $form['fields']['site'] = array(
      '#title' => t('blog', '主页'),
      '#type' => 'textfield',
      '#default_value' => $site,
      '#required' => $conf['blog_is_anonymous'][3],
      '#attributes' => array(
        'class' => "{url:true}"
      ),
    );
  }
  
  $form['fields']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('blog', '内容'),
    '#required' => 1
  );
  
  if(($conf['captcha']['blog_captcha']['data'] == 1 && !$user->uid) || $conf['captcha']['blog_captcha']['data'] == 2){
    $form['fields']['captcha'] = array(
      '#type' => 'captcha',
      '#title' => t('blog', '验证'),
      '#required' => 1,
      '#captcha' => array(
        'image' => $conf['captcha']['blog_captcha']['image'] ? '50x16' : 0,
        'type' => $conf['captcha']['blog_captcha']['type']
      )
    );
  }
  
  $form['fields']['format'] = filter_form_field($conf['blog_comment_format'], 1);
  
  $form['fields']['cid'] = array(
    '#type' => 'hidden',
    '#default_value' => $comment->cid,
    '#constant' => 1
  );
  $form['fields']['bid'] = array(
    '#type' => 'hidden',
    '#default_value' => $blog->bid,
    '#constant' => 1
  );
  $form['fields']['comment_count'] = array(
    '#type' => 'hidden',
    '#default_value' => $blog->comment_count,
    '#constant' => 1
  );
  $form['fields']['type'] = array(
    '#type' => 'hidden',
    '#default_value' => 0,
    '#constant' => 1
  );
  
  $form['fields']['submit']['#type'] = 'submit';
  $form['settings'] = array(
    '#ajax_validate' => 1,
    '#validate' => array('blog_comment_form_validate'),
  );
  
  return $form;
}

function blog_comment_form_validate($form, $v){
  global $user;
  
  if(!$v['bid']) return;
  
  if(!$user->uid){
    $blog_anonymous = NULL;
    if($v['name']){
      if(mb_strlen($v['name'], 'utf-8') > 32){
        $t['name']['#error'][] = t('blog', '昵称长度不大于 32 个字符');
      }
      $blog_anonymous[] = $v['name'];
    }
    
    if($v['mail']){
      if($msg = form_vali_mail($v['mail'])){
        $t['mail']['#error'][] = $msg;
      }
      $blog_anonymous[] = $v['mail'];
    }
    
    if($v['site']){
      if(mb_strlen($v['site'], 'utf-8') > 255){
        $t['site']['#error'][] = t('blog', '邮箱长度不大于 255 个字符');
      }
      $blog_anonymous[] = $v['site'];
    }
    
    if($blog_anonymous){
      global $cookie_domain;
      setcookie('blog_anonymous', implode('[#@#]', $blog_anonymous), $_SERVER['REQUEST_TIME'] + 31536000, '/', $cookie_domain);
    }
  }else{
    $v['name'] = $v['mail'] = $v['site'] = '';
  }
  
  $status = var_get('blog_comment_verify');
  if($status == 0 || ($status == 1 && $user->uid)){
    $v['status'] = 1;
  }else{
    $v['status'] = 0;
  }
  
  if(!$t && mb_strlen($v['body'], 'utf-8') < 30000){
    if(!$v['cid']){
      if(db_exec('INSERT INTO {blog_comment} (bid, name, mail, site, body, uid, format, status, type, timestamp, host) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', array($v['bid'], $v['name'], $v['mail'], $v['site'], $v['body'], $user->uid, $v['format'], $v['status'], $v['type'], $_SERVER['REQUEST_TIME'], ip_address()))){
        if(!$form['settings']['#redirect'] && !$_GET['redirect']){
          $cid = db_last_insert_id();
          if($v['status']){
            blog_comment_count($v['bid']);
            $v['comment_count'] += 1;
            $pager = var_get('blog_comment_pager_count', 20);
            if($v['comment_count'] > $pager){
              $redirect = url('node/'.$v['bid'], array('query' => 'page='.floor($v['comment_count']/$pager), 'fragment' => 'blog_comment_'.$cid));
            }
            
            custom_del('blog_front_cache');
            
          }else{
            dd_set_message(t('blog', '评论发布成功，正在等待审核'));
          }
          dd_goto(($redirect ? $redirect : $_SERVER['REQUEST_URI'].'%23blog_comment_'.$cid));
        }
      }
    }else if(db_exec('UPDATE {blog_comment} SET name = ?, mail = ?, site = ?, body = ?, format = ? WHERE cid = ?', array($v['name'], $v['mail'], $v['site'], $v['body'], $v['format'], $v['cid']))){
      dd_set_message(t('blog', '编辑成功'));
    }
  }else{
    $t['body']['#error'][] = t('blog', '评论长度不大于 30000 个字符');
  }
  
  return $t;
}

/**
 * 评论统计，只统计通过审核的评论
 */
function blog_comment_count($bid){
  db_exec('UPDATE {blog} SET comment_count = (SELECT COUNT(*) FROM {blog_comment} WHERE bid = ? AND status = 1) WHERE bid = ?', array($bid, $bid));
}

/**
 * @Implement of hook_system_site_captcha()
 */
function blog_system_site_captcha($op){
  if($op == 'fields'){
    return array(
      'blog_captcha' => array(
        'title' => t('blog', '日志评论'),
        'attributes' => array(
          '#options' => array(
            t('blog', '禁用验证码'),
            t('blog', '针对游客'),
            t('blog', '针对所有人'),
          )
        )
      )
    );
  }
}

/**
 * @Implement of hook_block_list()
 */
function blog_block_list($theme){
  return array(
  		'new' => array(
  				'title' => '最新日志',
  				'region' => 'left',
  				'visibility' => 1,
  				'custom' => array('limit' => 5),
  		  ),
      /*
      'hits' => array(
          'title' => '热门日志',
          'region' => 'left',
          'visibility' => 1,
          'custom' => array('limit' => 5),
        ),
        */
  	);
}

/**
 * @Implement of hook_block_setting()
 */
function blog_block_setting($theme, $config){
  $form['limit'] = array(
    '#title' => t('blog', '显示'),
    '#type' => 'textfield',
    '#attributes' => array('size' => 5),
    '#default_value' => $config->settings['custom']['limit'],
    '#field_suffix' => t('blog', '条'),
    '#required' => 1
  );
  return $form;
}

/**
 * @Implement of hook_block_save()
 */
function blog_block_save($theme, $config){
  if(preg_match('/[^0-9]/', $value['settings']['custom']['limit'])){
  	$t['settings']['custom']['limit']['#error'][] = t('blog', '只能是数字');
  }
  return $t;
}

/**
 * @Implement of hook_block_view()
 */
function blog_block_view($theme, $config){
  if($config->delta == 'new'){
  	if($fetch = db_query('SELECT b.bid, b.title, a.alias FROM {blog} b LEFT JOIN {alias} a ON b.bid = a.tid AND a.type = ? WHERE b.status = 1 ORDER BY b.bid DESC', array('blog'), array('limit' => $config->settings['custom']['limit']))){
    	foreach($fetch as $o){
    		$item[] = l($o->title, (!$o->alias ? 'node/'.$o->bid :$o->alias));
    	}
      $block['content'] = theme('item_list', $item);
      $block['title'] = $config->title;
    }
  }
  return $block;
}

/**
 * @Implement of hook_field_call_group()
 */
function blog_field_call_group($type = NULL){
  $groups = array(
    'field' => array(
    	'title' => t('blog', '日志字段'),
      'sum' => 0,
    	'level' => 0,
    )
  );
  return $type ? $groups[$type] : $groups;
}

/**
 * @Implement of hook_field_term_view()
 */
function blog_field_term_view($term){
  if($fetch = pager_query('SELECT b.bid, b.title, b.created FROM {blog} b INNER JOIN {fields_term_node} t ON b.bid = t.nid WHERE t.tid = ? ORDER BY b.top DESC, b.bid DESC', 30, 0, NULL, array($term->tid))){
    
    if($GLOBALS['conf']['blog_rss_node']){
      dd_set_html_head('<link rel="alternate" type="application/rss+xml" title="'.t('blog', '订阅最新日志').'" href="'.url('category/'.$term->tid.'/feed').'" />');
    }
    
    foreach($fetch as $o){
      $items[] = l($o->title, 'node/'.$o->bid) .'<span class="node_date">('. format_date($o->created).')</span>';
    }
    $output = theme('item_list', $items, NULL, 'ul', array('id' => 'blog_term_list'));
    $output .= pager_view();
  }else{
    $output = system_no_content();
  }
  return $output;
}

/**
 * @Implement of hook_field_view()
 */
function blog_field_view($field){
  if($fetch = pager_query('SELECT DISTINCT(t.nid), b.bid, b.title, b.created FROM {blog} b INNER JOIN {fields_term_node} t ON b.bid = t.nid INNER JOIN {fields_term} f ON f.tid = t.tid WHERE f.field_id = ? ORDER BY b.top DESC, b.bid DESC', 30, 0, NULL, array($field->field_id))){
    /*
    if($GLOBALS['conf']['blog_rss_node']){
      dd_set_html_head('<link rel="alternate" type="application/rss+xml" title="'.t('blog', '订阅最新日志').'" href="'.url('category/'.$term->tid.'/rss').'" />');
    }
    */
    foreach($fetch as $o){
      $items[] = l($o->title, 'node/'.$o->bid) .'<span class="node_date">('. format_date($o->created).')</span>';
    }
    $output = theme('item_list', $items, NULL, 'ul', array('id' => 'blog_term_list'));
    $output .= pager_view();
  }else{
    $output = system_no_content();
  }
  return $output;
}

/**
 * @Implement of hook_field_term_feed()
 */
function blog_field_term_feed($term){
  require dd_get_path('module', 'blog') . '/blog.feed.inc';
  dd_set_header('Content-Type: application/xml; charset=utf-8');
  echo blog_get_feed_node(NULL, $term->tid);
  exit;
}

/**
 * @Implement of hook_front()
 */
function blog_front(){
  global $conf;
  if($conf['blog_front_count']){
    
    if($conf['blog_rss_node']){
      dd_set_html_head('<link rel="alternate" type="application/rss+xml" title="'.t('blog', '订阅最新日志').'" href="'.f('custom.php?module=blog&op=feed&type=node').'" />');
    }
    if($conf['blog_rss_comment']){
      dd_set_html_head('<link rel="alternate" type="application/rss+xml" title="'.t('blog', '订阅最新评论').'" href="'.f('custom.php?module=blog&op=feed&type=comment').'" />');
    }
    
    $style = var_get('blog_front_style');
    if(!var_get('blog_front_style')){
      $blogs = array();
      if($_GET['page'] || (!$blogs = custom_get('blog_front_cache'))){
        if($fetch = pager_query('SELECT b.*, u.uid, u.name, a.alias FROM {blog} b INNER JOIN {users} u ON b.uid = u.uid LEFT JOIN {alias} a ON b.bid = a.tid AND a.type = ? WHERE b.status > 0 ORDER BY b.top DESC, b.bid DESC', $conf['blog_front_count'], 0, NULL, array('blog'))){
          
          foreach($fetch as $blog){
            $blogs[$blog->bid] = blog_load(0, 'summary', $blog);
          }
        }
        if(!$_GET['page']) {
          $blogs['pager'] = pager_view();
          custom_set('blog_front_cache', $blogs);
        }else{
          $pager = pager_view();
        }
      }
      if($blogs){
        foreach($blogs as $key => $blog){
          if($key != 'pager'){
            $content .= blog_view($blog);
          }else{
            $pager = $blog;
          }
        }
        $content .= $pager;
        dd_get_highlighter();
      }
    }else if($fetch = pager_query('SELECT title, created, bid FROM {blog} WHERE status = 1 ORDER BY b.top DESC, b.bid DESC', $conf['blog_front_count'])){
      foreach($fetch as $blog){
        $items[] = l($blog->title, 'node/'.$blog->bid) .'<span class="node_date">('. format_date($blog->created).')</span>';
      }
      $content = theme('item_list', $items, NULL, 'ul', array('id' => 'blog_term_list'));
      $content .= pager_view();
    }
    
    if(!$content){
      $content = system_no_content(l(t('blog', '创建日志'), 'admin/blogs/add'));
    }
    
    return $content;
  }
}

/**
 * @Implement of hook_init()
 */
function blog_init(){
  if($links = var_get_key('site_global', 'links')){
    if(!$items = var_get('blog_links_cache')){
      if($arr = dd_line_to_array($links, 1)){
        foreach($arr as $item){
          if(strpos($item, '☆') !== false){
            $v = explode('☆', $item);
            if(!$v[2]){
              $items[] = l($v[0], $v[1], array('attributes' => array('target' => '_blank')));
            }else{
              $items[] = l(img($v[2]), $v[1], array('html' => true, 'attributes' => array('target' => '_blank', 'title' => $v[0])));
            }
          }
        }
        if($items){
          var_set('blog_links_cache', $items);
        }
      }
    }
    if($items){
      shuffle($items);
      $items[] = l('申请链接', var_get_key('site_global', 'go_links'));
      dd_set_footer(dd_get_strong('友情链接').implode(' | ', $items));
    }
  }
  dd_add_css(dd_get_path('module', 'blog').'/blog.css');
}

/**
 * @Implement of hook_site_menu()
 */
function blog_site_menu(&$menu){
  global $user;
  if($user->uid && user_access('blog add')){
    $menu['blog'] = array(
      '#data' => l(t('blog', '日志'), 'admin/blogs'),
      '#childrens' => array(
        l(t('blog', '创建日志'), 'admin/blogs/add'),
        l(t('blog', '日志管理'), 'admin/blogs'),
        l(t('blog', '评论管理'), 'admin/blogs/comments'),
      )
    );
  }
}

/**
 * @Implement of hook_cron()
 */
function blog_cron($timestamp){
}

/**
 * 获取通告地址，并写入
 * @param (string) $string
 *  来自表单的字符串，以换行符分割为数组
 * @param (int) $bid
 *  日志 Id
 * @param (bool) $insert
 *  日志状态，true：新增，false：更新
 */
function blog_save_trackback($string, $bid, $insert = NULL){
  if($lists = dd_line_to_array($string, 1)){
    if(!$insert){
      if($fetch = db_query('SELECT trackback FROM {blog_trackback} WHERE bid = ?', array($bid))){
        foreach($fetch as $o){
          $key = array_search($o->trackback, $lists);
          if($key !== false){
            unset($lists[$key]);
          }
        }
      }
    }
    if($lists){
      $args = array();
      foreach($lists as $url){
        $args['values'][] = array($bid, $url, 0, 0, 0);
      }
      db_exec('INSERT INTO {blog_trackback} (bid, trackback, status, repeats, timestamp) VALUES (?, ?, ?, ?, ?)', $args);
      // 创建一个 cron
      dd_save_cron('blog', 'trackback', array('func' => 'blog_set_trackback', 'args' => array($bid)), 100);
    }
  }
}

/**
 * 发送 ping
 */
function blog_set_ping($bid){
  global $conf, $base_url;
  
  $data['params'] = array(
    $conf['site_global']['name'], // 网站名称
    $base_url, // 网站首页
    url('node/'.$bid, array('absolute' => true)), // 文章地址
    url(f('custom.php?module=blog&op=feed&type=node'), array('absolute' => true)) // rss 地址
  );
  
  return dd_set_ping($data);
}

/**
 * 发送通告
 */
function blog_set_trackback($bid = NULL){
  if($bid){
    $fetch = db_query('SELECT t.tid, t.repeats, t.bid, t.trackback, b.title, b.body FROM {blog_trackback} t INNER JOIN {blog} b ON t.bid = b.bid WHERE t.bid = ? AND t.status = 0', array($bid));
  }else{
    $fetch = db_query('SELECT t.tid, t.repeats, t.bid, t.trackback, b.title, b.body FROM {blog_trackback} t INNER JOIN {blog} b ON t.bid = b.bid WHERE t.status = 0');
  }
  
  if($fetch){
    foreach($fetch as $o){
      $trackback = array(
        'title' => $o->title,
        'excerpt' => mb_substr(strip_tags($o->body), 0, 255, 'utf-8'),
        'url' => url('node/'.$o->bid, array('absolute' => true)),
        'blog_name' => $GLOBALS['conf']['site_global']['name']
      );
      $result = dd_http_request($o->trackback, $trackback);
      if($result->code > 0 && $result->data){
        if(strpos($result->data, '<error>0</error>') !== false){
          db_exec('UPDATE {blog_trackback} SET status = 1, timestamp = ? WHERE tid = ?', array($_SERVER['REQUEST_TIME'], $o->tid));
          continue;
        }
      }
      if(($o->repeats+1) < 3){
        db_exec('UPDATE {blog_trackback} SET timestamp = ?, repeats = repeats + 1 WHERE tid = ?', array($_SERVER['REQUEST_TIME'], $o->tid));
      }else{
        db_exec('UPDATE {blog_trackback} SET timestamp = ?, status = -1 WHERE tid = ?', array($_SERVER['REQUEST_TIME'], $o->tid));
      }
    }
  }
  return true;
}

/**
 * 获取日志通告地址
 */
function blog_get_trackback_url($blog){
  if($blog->trackback == 1 || ($blog->trackback == 0 && $GLOBALS['conf']['blog_trackback'] == 1)){
    return f('custom.php?module=blog&op=trackback&bid='.$blog->bid);
  }
}

/**
 * @Implement of hook_call_custom()
 */
function blog_call_custom($v){
  global $conf, $base_url;
  switch($v['op']){
    case 'feed':
      require dd_get_path('module', 'blog') . '/blog.feed.inc';
      
      if($_GET['type'] == 'node'){
        dd_set_header('Content-Type: application/xml; charset=utf-8');
          /**
           * 默认：获取全站最新日志
           * $_GET['uid']：用户 id，获取该用户最新日志
           */
          echo blog_get_feed_node($_GET['uid']);
      }else if($_GET['type'] == 'comment'){
        dd_set_header('Content-Type: application/xml; charset=utf-8');
        /**
         * 默认：获取全部最新评论
         * $_GET['bid']：日志 id，获取该日志最新评论
         * $_GET['uid']：用户 id，获取该针对该用户的最新评论
         */
         
         echo blog_get_feed_comment($_GET['bid'], $_GET['uid']);
      }else{
        echo 'byebye';
      }
    break;
    case 'trackback':
      /**
       * 接收通告
       * 引用通告地址：custom.php?module=blog&op=trackback&bid={id}
       */
      
      // 必须提供的三个参数
      if($_POST['title'] && $_POST['url'] && $_POST['blog_name']){
        if($_GET['bid']){
          if($blog = db_query('SELECT bid, trackback, comment_count FROM {blog} WHERE bid = ?', array($_GET['bid']), array('return' => 'one'))){
            if($blog->trackback == 1 || ($blog->trackback == 0 && $conf['blog_trackback'] == 1)){
              if(!db_query('SELECT COUNT(*) FROM {blog_comment} WHERE bid = ? AND site = ?', array($blog->bid, $_POST['url']), array('return' => 'column'))){
                if($_POST['excerpt']){
                  if(mb_strlen($_POST['excerpt'], 'utf-8') > 30000){
                    $body = mb_substr($_POST['excerpt'], 0, 30000, 'utf-8');
                  }else{
                    $body = $_POST['excerpt'];
                  }
                }else{
                  $body = $_POST['title'];
                }
                $body = strip_tags($body);
                
                switch($conf['blog_trackback_verify']){
                  case 1: // 曾有一条通告通过审核的网站不需要再审核
                    $status = 0;
                    $uri = parse_url($_POST['url']);
                    if($uri['scheme'] && $uri['host']){
                      if(db_query('SELECT bid FROM {blog_comment} WHERE type = 1 AND status = 1 AND site LIKE ?', array($uri['scheme'] .'://'. $uri['host'].'%'), array('limit' => 1))){
                        $status = 1;
                      }
                    }
                  break;
                  case 2: // 所有通告均需要审核
                    $status = 0;
                  break;
                  default: // 不需要审核
                    $status = 1;
                }
                if(!db_exec('INSERT INTO {blog_comment} (bid, name, mail, site, body, uid, format, status, type, timestamp, host) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', array($blog->bid, $_POST['blog_name'], '', $_POST['url'], $body, 0, 0, $status, 1, $_SERVER['REQUEST_TIME'], ip_address()))){
                  $message = t('blog', '服务器故障，通告写入失败');
                }else if($status){
                  blog_comment_count($blog->bid);
                }
              }else{
                $message = t('blog', '请不要重复发送通告');
              }
            }else{
              $message = t('blog', '本篇日志不允许通告');
            }
          }else{
            $message = t('blog', '错误的通告地址');
          }
        }else{
          $message = t('blog', '错误的日志 ID');
        }
      }else{
        $message = t('blog', '必须提供 title、url、blog_name');
      }
      
    	header('Content-Type: text/xml; charset=utf-8');
      
    	if($message){
    		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";
    		echo "<response>\n";
    		echo "<error>1</error>\n";
    		echo "<message>$message</message>\n";
    		echo "</response>";
    	}else{
    		echo '<?xml version="1.0" encoding="utf-8"?'.">\n";
    		echo "<response>\n";
    		echo "<error>0</error>\n";
    		echo "</response>";
    	}
    break;
    case 'drupal_import':
      global $database;
      $database['drupal'] = array (
        'driver' => 'mysql',
        'dbname' => 'echo',
        'dbuser' => 'root',
        'dbpass' => '123456',
        'host' => 'localhost',
        'port' => '3306',
        'prefix' => '',
      );
      $data_opt = array('target' => 'drupal');
      /*
      if($fetch = db_query('SELECT v.name AS category, t.* FROM {vocabulary} v INNER JOIN {term_data} t ON v.vid = t.vid', NULL, $data_opt)){
        foreach($fetch as $o){
          print_r($o);
        }
      }
      */
      if($fetch = db_query('SELECT * FROM {vocabulary}', NULL, $data_opt)){
        foreach($fetch as $o){
          $field = new stdClass();
          $field->type = 'field';
          $field->module = 'blog';
          $field->name = $o->name;
          $field->required = $o->required;
          $field->data['description'] = $o->description;
          if($o->multiple){
            $field->field_type = 'checkbox';
          }else if($o->tags){
            $field->field_type = 'tags';
          }
          $field->weight = $o->weight;
          if($field = field_save($field)){
            print_r($field);
          }
        }
      }
  }
  exit;
}

/**
 * @Implement of hook_system_site_global()
 */
function blog_system_site_global($type, &$form){
  if($type == 'form'){
    $form['fields']['links'] = array(
      '#type' => 'textarea',
      '#title' => t('blog', '友情链接'),
      '#default_value' => var_get_key('site_global', 'links'),
      '#description' => t('blog', '每行一个，格式如：网站名称☆链接☆图片地址，以 ☆ 分隔')
    );
    $form['fields']['go_links'] = array(
      '#type' => 'textfield',
      '#title' => t('blog', '申请地址'),
      '#default_value' => var_get_key('site_global', 'go_links'),
    );
  }else if($type == 'submit'){
    var_del('blog_links_cache');
  }
}